import React from 'react';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import SelectControl from 'components/select-control';
import DishesList from 'components/schedule-item-dishes-list';
import ProductsList from 'components/schedule-item-products-list';
import DeleteIcon from '@material-ui/icons/Delete';
import './schedule-dialog.css';
import { restaurantsSelectItems, dishCategoriesSelectItems,
         dishesSelectItems, productsSelectItems,
         restaurantIdToName, dishIdToName } from 'api'
export default class ScheduleDialog extends React.Component {
  state = {
    open: false,
    event: { dishes: [] }
  };

  componentWillReceiveProps(nextProps) {
    if (nextProps.dialogOpen !== this.state.open) {
      this.setState({ open: nextProps.dialogOpen, event: nextProps.event });
    }
  }
  upDownProperty(arr, id, propName, upDown) {
    const idx = arr.findIndex((el) => el.id === id);
    if(idx === -1) return;

    const oldItem = arr[idx];
    const newItem = {...oldItem, [propName]: upDown ? ++oldItem[propName] : --oldItem[propName]};
    return [
      ...arr.slice(0,idx),
      newItem,
      ...arr.slice(idx + 1)
    ]
  }
  toggleProperty(arr, id, propName) {
    const idx = arr.findIndex((el) => el.value === id)
    const oldItem = arr[idx];
    const newItem = {...oldItem, [propName]: !oldItem[propName]};

    return [
      ...arr.slice(0,idx),
      newItem,
      ...arr.slice(idx + 1)
    ]
  }

  increaseProperty = (arr, id, propName) => this.upDownProperty(arr, id, propName, true);
  decreseProperty = (arr, id, propName) => this.upDownProperty(arr, id, propName, false);

  onRestaurantChange = ({name, value}) => {
    this.setState({
      event: { ...this.state.event, [name]: restaurantIdToName(value), restaurant_id: value },
    });
  };
  onDishCategoryChange = ({value}) => {
    this.setState({
      event: { ...this.state.event,  category_id: value },
    });
  };
  onDishChange = ({value}) => {
    const newSelectedDish = { dish_id: value,
                              products: productsSelectItems(value)
                                        .map( (product) => ( {...product, checked: true}) )
                                            }
    this.setState({
        event: { ...this.state.event, selectedDish: newSelectedDish },
    });
  };
  onProductChange = (product_id) => {
    const {products} = this.state.event.selectedDish;
    const changedProducts = this.toggleProperty(products, product_id, 'checked');
    this.setState({
      event: { ...this.state.event, selectedDish: {...this.state.event.selectedDish, products: changedProducts }}
    });
  }

  onDishAdd = () => {
    const { dish_id, products } = this.state.event.selectedDish;

    if(dish_id)
    {
      const dishes = this.state.event.dishes;
      const changedDishes = this.increaseProperty(dishes, dish_id, 'count');

      if(changedDishes){
        this.setState({
          event: { ...this.state.event, dishes: changedDishes }
        });
      }
      else{
        const newDish = {id: dish_id, name: dishIdToName(dish_id), products: products, count:1 };
        this.setState({
          event: { ...this.state.event, dishes: [...this.state.event.dishes, newDish ] }
        });
      }
    }
  };
  onDishUp = (dish_id) => {
    const dishes = this.state.event.dishes;
    const changedDishes = this.increaseProperty(dishes, dish_id, 'count');

    this.setState({
      event: { ...this.state.event, dishes: changedDishes }
    });
  }
  onDishDown = (dish_id) => {
    const dishes = this.state.event.dishes
    const dish = dishes.find((dish) => dish.id === dish_id);
    if(dish.count === 1) this.onDishDelete(dish_id);
    else {
      const changedDishes = this.decreseProperty(dishes, dish_id, 'count');

      this.setState({
        event: { ...this.state.event, dishes: changedDishes }
      });
    }

  }
  onDishDelete = (dish_id) => {
    const dishes = this.state.event.dishes;
    const idx = dishes.findIndex((dish) => dish.id ===dish_id)
    const changedDishes = [
                            ...dishes.slice(0,idx),
                            ...dishes.slice(idx + 1)
                          ];
    this.setState({
      event: { ...this.state.event, dishes: changedDishes }
    });
  }

  handleClickOpen = () => {
    this.setState({ open: true });
  };
  handleClose = () => {
    this.setState({ open: false });
  };
  handleApply = () => {
    this.props.handleApply(this.state.event);
    this.setState({ open: false });
  };
  handleDelete = () => {
    this.props.handleDelete(this.state.event);
    this.setState({ open: false });
  };

  render() {
console.log("rendering... State=", this.state);
    const {restaurant_id, category_id, selectedDish, dishes} = this.state.event;
    const DishProducts =  selectedDish ? () => ( <ProductsList items={selectedDish.products} onProductChange = {this.onProductChange} /> )
                                       : () => ( <span></span> );
    return (
      <div >
        <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          aria-labelledby="form-dialog-title"
        >
        <DialogTitle id="form-dialog-title">Schedule Item</DialogTitle>
            <DialogContent className="schedule-item" >
              <div className="selects">
                <SelectControl onSelectChange={this.onRestaurantChange}
                                 name = 'title'
                                 value = {restaurant_id}
                                 items = {restaurantsSelectItems}
                                 emptyValue = 'Select restaurant'/>
                <SelectControl onSelectChange={this.onDishCategoryChange}
                                name = 'category'
                                value = {category_id}
                                items = {dishCategoriesSelectItems(restaurant_id)}
                                emptyValue = 'Select category'/>
                 <SelectControl onSelectChange={this.onDishChange}
                                name = 'dish'
                                items = {dishesSelectItems(category_id)}
                                emptyValue = 'Select dish'/>

                   <div className="selected-products">
                      <DishProducts />
                   </div>
                <Button onClick={this.onDishAdd} color="secondary">
                  Add
                </Button>
              </div>
              <div className="selected-dishes">
                 <DishesList items={dishes} onDishUp = {this.onDishUp} onDishDown = {this.onDishDown} onDishDelete = {this.onDishDelete}/>
              </div>
            </DialogContent>


          <DialogActions>
          <Button onClick={ this.handleDelete } color="secondary">
            <DeleteIcon />
          </Button>
            <Button onClick={this.handleClose} color="primary">
              Close
            </Button>
            <Button onClick={this.handleApply} color="primary">
              Apply changes
            </Button>
          </DialogActions>
        </Dialog>
      </div>
    );
  }
}
