{"ast":null,"code":"import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport lift from './lift';\nimport or from './or';\n/**\r\n * A function wrapping calls to the two functions in an `||` operation,\r\n * returning the result of the first function if it is truth-y and the result\r\n * of the second function otherwise. Note that this is short-circuited,\r\n * meaning that the second function will not be invoked if the first returns a\r\n * truth-y value.\r\n *\r\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\r\n * applicative functor.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category Logic\r\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\r\n * @param {Function} f a predicate\r\n * @param {Function} g another predicate\r\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\r\n * @see R.or\r\n * @example\r\n *\r\n *      var gt10 = x => x > 10;\r\n *      var even = x => x % 2 === 0;\r\n *      var f = R.either(gt10, even);\r\n *      f(101); //=> true\r\n *      f(8); //=> true\r\n */\n\nvar either =\n/*#__PURE__*/\n_curry2(function either(f, g) {\n  return _isFunction(f) ? function _either() {\n    return f.apply(this, arguments) || g.apply(this, arguments);\n  } : lift(or)(f, g);\n});\n\nexport default either;","map":null,"metadata":{},"sourceType":"module"}