{"ast":null,"code":"import _concat from './internal/_concat';\nimport _createPartialApplicator from './internal/_createPartialApplicator';\n/**\r\n * Takes a function `f` and a list of arguments, and returns a function `g`.\r\n * When applied, `g` returns the result of applying `f` to the arguments\r\n * provided initially followed by the arguments provided to `g`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\r\n * @param {Function} f\r\n * @param {Array} args\r\n * @return {Function}\r\n * @see R.partialRight\r\n * @example\r\n *\r\n *      var multiply2 = (a, b) => a * b;\r\n *      var double = R.partial(multiply2, [2]);\r\n *      double(2); //=> 4\r\n *\r\n *      var greet = (salutation, title, firstName, lastName) =>\r\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\r\n *\r\n *      var sayHello = R.partial(greet, ['Hello']);\r\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\r\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\r\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\r\n */\n\nvar partial =\n/*#__PURE__*/\n_createPartialApplicator(_concat);\n\nexport default partial;","map":null,"metadata":{},"sourceType":"module"}