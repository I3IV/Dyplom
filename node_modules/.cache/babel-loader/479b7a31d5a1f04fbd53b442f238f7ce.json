{"ast":null,"code":"import _curryN from './internal/_curryN';\nimport _dispatchable from './internal/_dispatchable';\nimport _has from './internal/_has';\nimport _reduce from './internal/_reduce';\nimport _xreduceBy from './internal/_xreduceBy';\n/**\r\n * Groups the elements of the list according to the result of calling\r\n * the String-returning function `keyFn` on each element and reduces the elements\r\n * of each group to a single value via the reducer function `valueFn`.\r\n *\r\n * This function is basically a more general [`groupBy`](#groupBy) function.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category List\r\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\r\n * @param {Function} valueFn The function that reduces the elements of each group to a single\r\n *        value. Receives two values, accumulator for a particular group and the current element.\r\n * @param {*} acc The (initial) accumulator value for each group.\r\n * @param {Function} keyFn The function that maps the list's element into a key.\r\n * @param {Array} list The array to group.\r\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\r\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\r\n * @see R.groupBy, R.reduce\r\n * @example\r\n *\r\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\r\n *      var namesByGrade = reduceToNamesBy(function(student) {\r\n *        var score = student.score;\r\n *        return score < 65 ? 'F' :\r\n *               score < 70 ? 'D' :\r\n *               score < 80 ? 'C' :\r\n *               score < 90 ? 'B' : 'A';\r\n *      });\r\n *      var students = [{name: 'Lucy', score: 92},\r\n *                      {name: 'Drew', score: 85},\r\n *                      // ...\r\n *                      {name: 'Bart', score: 62}];\r\n *      namesByGrade(students);\r\n *      // {\r\n *      //   'A': ['Lucy'],\r\n *      //   'B': ['Drew']\r\n *      //   // ...,\r\n *      //   'F': ['Bart']\r\n *      // }\r\n */\n\nvar reduceBy =\n/*#__PURE__*/\n_curryN(4, [],\n/*#__PURE__*/\n_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n  return _reduce(function (acc, elt) {\n    var key = keyFn(elt);\n    acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n    return acc;\n  }, {}, list);\n}));\n\nexport default reduceBy;","map":null,"metadata":{},"sourceType":"module"}