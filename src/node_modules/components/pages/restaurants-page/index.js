import React, { Fragment, Component } from "react";

import Header from "shared-components/header";
import GridList from "shared-components/grid-list";
import SearchPanel from "shared-components/search-panel";
import RestaurantFilter from "./restaurant-filter";
import RestListItem from "./grid-list-item-restaurant";
import Spinner from "shared-components/spinner";
import "./restaurant-page.css";
import { getAllRestaurants } from "api";
import { restaurantsStore } from "store";
import { observer } from "mobx-react";

class RestaurantPage extends Component {
  state = {
    selectedDay: new Date().getDay(),
    term: "",
    filter: {
      noFilter: false,
      country: "",
      city: "",
      seats: "",
      cuisine: ""
    }
  };

  onSearchChange = term => {
    this.setState({ term });
  };
  onFilterChange = filter => {
    this.setState({ filter });
  };
  search(restaurants, term) {
    if (term.length === 0) {
      return restaurants;
    }
    return restaurants.filter(r => {
      return r.RestaurantName.toLowerCase().indexOf(term.toLowerCase()) > -1;
    });
  }

  setSchedule(_restaurants, _day) {
    return _restaurants.map(r => {
      const { schedule, ...restProps } = r;
      const idx = schedule.findIndex(ds => ds.Day === _day);
      return {
        ...restProps,
        schedule: schedule[idx]
      };
    });
  }

  filter(restaurants, filter) {
    if (filter.noFilter) return restaurants;

    let filtered = restaurants;

    if (filter.country.length !== 0) {
      filtered = filtered.filter(r => r.country === filter.country);
    }
    if (filter.city.length !== 0) {
      filtered = filtered.filter(r => r.city === filter.city);
    }
    if (filter.seats.length !== 0) {
      filtered = filtered.filter(r => r.seats >= filter.seats);
    }
    if (filter.cuisine.length !== 0) {
      filtered = filtered.filter(r => r.cuisine === filter.cuisine);
    }
    return filtered;
  }

  render() {
    const { filter, term } = this.state;
    const restaurants = this.setSchedule(
      restaurantsStore.filteredRestaurants,
      this.state.selectedDay
    );
    const visibleItems = this.search(restaurants, term);
    const content = !restaurants ? (
      <Spinner />
    ) : visibleItems && visibleItems.length ? (
      <GridList data={visibleItems} GridListItem={RestListItem} />
    ) : (
      <span className="message">No results that match your search</span>
    );

    return (
      <Fragment>
        <Header />
        <div className="rest-page-content">
          <div className="filter-bar">
            <div className="search-bar">
              <SearchPanel
                onSearchChange={this.onSearchChange}
                placeholder="Search restaurants"
              />
            </div>
            <RestaurantFilter
              onFilterChange={this.onFilterChange}
              filter={this.state.filter}
            />
          </div>
        </div>
        {content}
      </Fragment>
    );
  }
}
export default observer(RestaurantPage);
