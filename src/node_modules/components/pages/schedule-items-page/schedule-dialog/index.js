import React, { Fragment } from "react";
import Button from "@material-ui/core/Button";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogTitle from "@material-ui/core/DialogTitle";
import DialogContent from "@material-ui/core/DialogContent";
import SelectControl from "shared-components/select-control";
import DishesList from "../schedule-item-dishes-list";
import ProductsList from "../../../../shared-components/products-list";
import AdditionalProductsList from "shared-components/additional-products-list";
import RadioSelect from "shared-components/radio-select";
import DeleteIcon from "@material-ui/icons/Delete";
import "./schedule-dialog.css";
import {
  dishSizesSelectItems,
  restaurantIdToName,
  seatsSelectItems,
  getRestaurantsSelect,
  getCategoriesSelect,
  getDishesSelect,
  getCustomerAddressesSelect,
  getDish
} from "api";
import * as R from "ramda";
import Spinner from "shared-components/spinner";
import Paper from "@material-ui/core/Paper";
import Draggable from "react-draggable";

function PaperComponent(props) {
  return (
    <Draggable>
      <Paper {...props} />
    </Draggable>
  );
}

const formatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2
});

export default class ScheduleDialog extends React.Component {
  state = {
    open: false,
    event: { dishes: [] },
    editMode: false,
    SelectCategories: [],
    SelectDishes: []
  };
  deliveryLocations = [
    { id: 1, name: "In restaurant" },
    { id: 2, name: "Deliver to address" }
  ];
  setSelect(selectMethod, selectName) {
    this.setState({ loading: true });
    selectMethod().then(selects => {
      if (this.isUnmounted) {
        return;
      }
      this.setState({ [selectName]: selects, loading: false });
    });
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.dialogOpen !== this.state.open) {
      this.setState({
        open: nextProps.dialogOpen,
        event: nextProps.event,
        editMode: false
      });
      const r_id = nextProps.event.restaurant_id;
      if (r_id) this.updateCategoriesSelect(r_id);
      if (nextProps.event.address_id)
        this.setState({ event: { ...nextProps.event, location_id: "2" } });
    }
  }
  componentDidMount() {
    this.setSelect(getRestaurantsSelect, "SelectRestaurant");
    this.setSelect(getCustomerAddressesSelect, "SelectAddresses");
  }
  componentWillUnmount() {
    this.isUnmounted = true;
  }
  updateCategoriesSelect(restaurant_id) {
    this.setSelect(
      () => getCategoriesSelect(restaurant_id),
      "SelectCategories"
    );
  }
  updateDishesSelect(category_id) {
    this.setSelect(() => getDishesSelect(category_id), "SelectDishes");
  }
  updateSelectedDish(dish_id) {
    if (!dish_id) return;
    this.setState({ loading: true });
    getDish(dish_id).then(dish => {
      if (this.isUnmounted) {
        return;
      }
      this.setState({
        SelectedDish: {
          ...dish,
          SelectedSize: dish.dish_sizes[0].id,
          price: dish.dish_sizes[0].price,
          totalPrice: dish.dish_sizes[0].price,
          count: 1
        },
        loading: false
      });
    });
  }

  upDownProperty(arr, id, propName, upDown) {
    const idx = arr.findIndex(el => el.id === id);
    if (idx === -1) return;

    const oldItem = arr[idx];
    const newPropValue = upDown ? ++oldItem[propName] : --oldItem[propName];
    const newItem = {
      ...oldItem,
      [propName]: newPropValue,
      totalPrice: oldItem.price * newPropValue
    };
    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }
  toggleProperty(arr, id, propName) {
    const idx = arr.findIndex(el => el.value === id);
    const oldItem = arr[idx];
    const newItem = { ...oldItem, [propName]: !oldItem[propName] };

    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }
  updateItem(arr, id, item, props) {
    const idx = arr.findIndex(el => el.id === id);
    const newItem = props ? { ...arr[idx], ...props } : item;
    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }

  increaseProperty = (arr, id, propName) =>
    this.upDownProperty(arr, id, propName, true);
  decreaseProperty = (arr, id, propName) =>
    this.upDownProperty(arr, id, propName, false);

  onRestaurantChange = ({ value }) => {
    this.updateCategoriesSelect(value);
    this.setState({
      event: {
        ...this.state.event,
        title: restaurantIdToName(value),
        restaurant_id: value,
        category_id: 0,
        selectedDish: undefined
      }
    });
  };
  onDishCategoryChange = ({ value }) => {
    this.updateDishesSelect(value);
    this.setState({
      event: {
        ...this.state.event,
        category_id: value,
        selectedDish: undefined
      }
    });
  };
  onDishChange = ({ value }) => {
    this.updateSelectedDish(value);
    const newSelectedDish = value
      ? {
          id: value,
          addlProducts: [],
          sizes: dishSizesSelectItems(value),
          size_id: dishSizesSelectItems(value)[0].id
        }
      : undefined;
    this.setState({
      event: { ...this.state.event, selectedDish: newSelectedDish }
    });
  };
  onProductChange = product_id => {
    const { products } = this.state.event.selectedDish;
    const changedProducts = this.toggleProperty(
      products,
      product_id,
      "checked"
    );
    this.setState({
      event: {
        ...this.state.event,
        selectedDish: {
          ...this.state.event.selectedDish,
          products: changedProducts
        }
      }
    });
  };
  onDishSizeChange = size_id => {
    const { dish_sizes, count } = this.state.SelectedDish;
    const sizeIdx = dish_sizes.findIndex(size =>
      R.equals(size.id.toString(), size_id.toString())
    );
    const price = dish_sizes[sizeIdx].price;
    this.setState({
      SelectedDish: {
        ...this.state.SelectedDish,
        SelectedSize: size_id,
        price,
        totalPrice: price * count
      }
    });
    this.setState({
      event: {
        ...this.state.event,
        selectedDish: { ...this.state.event.selectedDish, size_id }
      }
    });
  };
  onLocationChange = location_id => {
    if (location_id === "1")
      this.setState({
        event: {
          ...this.state.event,
          location_id: location_id,
          address_id: null
        }
      });
    else
      this.setState({
        event: { ...this.state.event, location_id: location_id }
      });
  };
  onAddressChange = ({ value }) => {
    this.setState({
      event: { ...this.state.event, address_id: value }
    });
  };
  onSeatsChange = ({ value }) => {
    this.setState({
      event: { ...this.state.event, seats: value }
    });
  };

  deleteProduct = product => {
    const addlProducts = R.reject(
      R.eqProps("id", product),
      this.state.event.selectedDish.addlProducts
    );
    this.setState(
      R.assocPath(
        ["event", "selectedDish", "addlProducts"],
        addlProducts,
        this.state
      )
    );
    this.setState({ addlProducts });
  };
  toggleProduct = product => {
    const oldAddl = this.state.event.selectedDish.addlProducts;
    const p = R.find(R.eqProps("id", product), oldAddl);
    const addlProducts = p
      ? R.reject(R.eqProps("id", product), oldAddl)
      : R.append(product, oldAddl);
    this.setState(
      R.assocPath(
        ["event", "selectedDish", "addlProducts"],
        addlProducts,
        this.state
      )
    );
  };

  onDishAdd = () => {
    const { id, addlProducts } = this.state.event.selectedDish;
    const { DishName } = this.state.SelectedDish;

    if (id) {
      const dishes = this.state.event.dishes;
      const changedDishes = this.increaseProperty(dishes, id, "count");

      if (changedDishes) {
        this.setState({
          event: { ...this.state.event, dishes: changedDishes }
        });
      } else {
        const dish = {
          ...this.state.SelectedDish,
          id,
          name: DishName,
          addlProducts,
          count: 1
        };
        this.setState({
          event: {
            ...this.state.event,
            dishes: [...this.state.event.dishes, dish]
          }
        });
      }
    }
  };
  onDishUp = dish_id => {
    const dishes = this.state.event.dishes;
    const changedDishes = this.increaseProperty(dishes, dish_id, "count");

    this.setState({
      event: { ...this.state.event, dishes: changedDishes }
    });
  };
  onDishDown = dish_id => {
    const dishes = this.state.event.dishes;
    const dish = dishes.find(dish => dish.id === dish_id);

    if (dish.count === 1);
    else {
      const changedDishes = this.decreaseProperty(dishes, dish_id, "count");

      this.setState({
        event: { ...this.state.event, dishes: changedDishes }
      });
    }
  };
  onDishDelete = dish_id => {
    const dishes = this.state.event.dishes;
    const idx = dishes.findIndex(dish => dish.id === dish_id);
    const changedDishes = [...dishes.slice(0, idx), ...dishes.slice(idx + 1)];
    this.setState({
      event: { ...this.state.event, dishes: changedDishes }
    });
  };
  onDishClick = dish_id => {
    const dishes = this.state.event.dishes;
    const idx = dishes.findIndex(dish => dish.id === dish_id);
    this.setState({
      SelectedDish: dishes[idx],
      event: { ...this.state.event, selectedDish: dishes[idx] },
      editMode: true
    });
  };
  onDishEditSave = () => {
    const { selectedDish, dishes } = this.state.event;
    const { id, addlProducts } = selectedDish;
    const { SelectedSize, totalPrice, price } = this.state.SelectedDish;
    const changedDishes = this.updateItem(dishes, id, selectedDish, {
      addlProducts,
      SelectedSize,
      price,
      totalPrice
    });
    this.setState({
      event: {
        ...this.state.event,
        dishes: changedDishes,
        selectedDish: undefined
      },
      editMode: false
    });
  };
  onDishEditCancel = () => {
    this.setState({
      event: { ...this.state.event, selectedDish: undefined },
      editMode: false
    });
  };

  handleClickOpen = () => {
    this.setState({ open: true });
  };
  handleClose = () => {
    this.setState({ open: false });
  };
  handleApply = () => {
    this.setState({ open: false });
    this.props.handleApply({
      ...this.state.event,
      TotalPrice: this.countTotal()
    });
  };
  handleDelete = () => {
    this.props.handleDelete(this.state.event);
    this.setState({ open: false });
  };
  countTotal = () => {
    let total = 0;
    this.state.event.dishes.forEach(dish => {
      total += dish.totalPrice;
    });
    return total;
  };
  render() {
    const { editMode, event } = this.state;
    const {
      restaurant_id,
      category_id,
      selectedDish,
      start,
      dishes,
      location_id,
      address_id,
      seats
    } = event;
    const location = location_id ? location_id : "1";
    const checked =
      !R.isNil(selectedDish) && !R.isNil(selectedDish.addlProducts)
        ? R.map(R.prop("id"), selectedDish.addlProducts)
        : [];
    const SelectRestaurant = () =>
      !editMode && (
        <SelectControl
          onSelectChange={this.onRestaurantChange}
          name="title"
          value={restaurant_id}
          items={this.state.SelectRestaurant}
          emptyValue="Select restaurant"
        />
      );
    const SelectCategory = () =>
      !editMode && (
        <SelectControl
          onSelectChange={this.onDishCategoryChange}
          name="category"
          value={category_id}
          items={this.state.SelectCategories}
          emptyValue="Select category"
        />
      );
    const SelectDish = () =>
      !editMode && (
        <SelectControl
          onSelectChange={this.onDishChange}
          name="dish"
          value={selectedDish ? selectedDish.id : 0}
          items={this.state.SelectDishes}
          emptyValue="Select dish"
        />
      );
    const SelectLocation = () =>
      dishes.length > 0 &&
      !editMode && (
        <RadioSelect
          items={this.deliveryLocations}
          selected={location_id}
          onChange={this.onLocationChange}
        />
      );
    const SelectSeats = () =>
      location === "1" &&
      !editMode &&
      dishes.length > 0 && (
        <SelectControl
          onSelectChange={this.onSeatsChange}
          name="seats"
          items={seatsSelectItems}
          value={seats}
          emptyValue="Select seats number"
        />
      );
    const SelectAddress = () =>
      location === "2" &&
      !editMode &&
      dishes.length > 0 && (
        <SelectControl
          onSelectChange={this.onAddressChange}
          name="title"
          value={address_id}
          items={this.state.SelectAddresses}
          emptyValue="Select address"
        />
      );
    const DishSizes = () => {
      return (
        selectedDish !== undefined && (
          <RadioSelect
            items={this.state.SelectedDish.dish_sizes.map(s => ({
              id: s.id,
              name: s.DishSizeName
            }))}
            selected={this.state.SelectedDish.SelectedSize}
            onChange={this.onDishSizeChange}
          />
        )
      );
    };
    const ButtonAdd = () =>
      !editMode && (
        <Button
          onClick={this.onDishAdd}
          disabled={!(restaurant_id && category_id && selectedDish)}
          color="secondary"
        >
          Add
        </Button>
      );
    const ButtonEditSave = () =>
      editMode && (
        <Button onClick={this.onDishEditSave} color="secondary">
          Save
        </Button>
      );
    const ButtonEditCancel = () =>
      editMode && (
        <Button onClick={this.onDishEditCancel} color="primary">
          Cancel
        </Button>
      );
    const content = !this.state.loading ? (
      <Fragment>
        <div className="selects">
          <SelectRestaurant />
          <SelectCategory />
          <SelectDish />
          {!R.isNil(selectedDish) &&
            !editMode && (
              <ProductsList
                toggleProduct={this.toggleProduct}
                checked={checked}
                maxHeight={200}
                maxWidth={225}
              />
            )}
          {!R.isEmpty(checked) && (
            <AdditionalProductsList
              items={selectedDish.addlProducts}
              maxWidth={225}
              onDelete={this.deleteProduct}
            />
          )}
          <DishSizes />
          <ButtonAdd />
          <div className="row-elements">
            <ButtonEditCancel />
            <ButtonEditSave />
          </div>
        </div>
        <div className="column-elements">
          <DishesList
            items={dishes}
            onDishUp={this.onDishUp}
            onDishDown={this.onDishDown}
            onDishDelete={this.onDishDelete}
            onDishClick={this.onDishClick}
          />
          <SelectLocation />
          <SelectAddress />
          <SelectSeats />
        </div>
      </Fragment>
    ) : (
      <Spinner />
    );
    return (
      <div>
        <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          PaperComponent={PaperComponent}
          aria-labelledby="draggable-dialog-title"
        >
          <DialogTitle id="draggable-dialog-title">
            {start ? start.toLocaleString() : `Schedule Item`}
          </DialogTitle>

          <DialogContent className="schedule-item">{content}</DialogContent>

          <DialogActions className="schedule-dialog_actions">
            <Button onClick={this.handleDelete} color="secondary">
              <DeleteIcon />
            </Button>
            <p>Total: {formatter.format(this.countTotal())}</p>
            <Button onClick={this.handleClose} color="primary">
              Close
            </Button>
            <Button onClick={this.handleApply} color="primary">
              Apply changes
            </Button>
          </DialogActions>
        </Dialog>
      </div>
    );
  }
}
