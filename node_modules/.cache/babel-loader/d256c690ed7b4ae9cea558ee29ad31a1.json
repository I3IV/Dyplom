{"ast":null,"code":"import pipeP from './pipeP';\nimport reverse from './reverse';\n/**\r\n * Performs right-to-left composition of one or more Promise-returning\r\n * functions. The rightmost function may have any arity; the remaining\r\n * functions must be unary.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\r\n * @param {...Function} functions The functions to compose\r\n * @return {Function}\r\n * @see R.pipeP\r\n * @example\r\n *\r\n *      var db = {\r\n *        users: {\r\n *          JOE: {\r\n *            name: 'Joe',\r\n *            followers: ['STEVE', 'SUZY']\r\n *          }\r\n *        }\r\n *      }\r\n *\r\n *      // We'll pretend to do a db lookup which returns a promise\r\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\r\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\r\n *      lookupUser('JOE').then(lookupFollowers)\r\n *\r\n *      //  followersForUser :: String -> Promise [UserId]\r\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\r\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\r\n *      // Followers: [\"STEVE\",\"SUZY\"]\r\n */\n\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n\n  return pipeP.apply(this, reverse(arguments));\n}","map":null,"metadata":{},"sourceType":"module"}