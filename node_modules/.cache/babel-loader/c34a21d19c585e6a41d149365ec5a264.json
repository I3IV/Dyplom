{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes2 = require(\"./utils/propTypes\");\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _helpers = require(\"./utils/helpers\");\n\nvar _constants = require(\"./utils/constants\");\n\nvar _localizer = require(\"./localizer\");\n\nvar _messages = _interopRequireDefault(require(\"./utils/messages\"));\n\nvar _move = _interopRequireDefault(require(\"./utils/move\"));\n\nvar _Views = _interopRequireDefault(require(\"./Views\"));\n\nvar _Toolbar = _interopRequireDefault(require(\"./Toolbar\"));\n\nvar _NoopWrapper = _interopRequireDefault(require(\"./NoopWrapper\"));\n\nvar _omit = _interopRequireDefault(require(\"lodash/omit\"));\n\nvar _defaults = _interopRequireDefault(require(\"lodash/defaults\"));\n\nvar _transform = _interopRequireDefault(require(\"lodash/transform\"));\n\nvar _mapValues = _interopRequireDefault(require(\"lodash/mapValues\"));\n\nvar _accessors = require(\"./utils/accessors\");\n\nfunction viewNames(_views) {\n  return !Array.isArray(_views) ? Object.keys(_views) : _views;\n}\n\nfunction isValidView(view, _ref) {\n  var _views = _ref.views;\n  var names = viewNames(_views);\n  return names.indexOf(view) !== -1;\n}\n/**\r\n * react-big-calendar is a full featured Calendar component for managing events and dates. It uses\r\n * modern `flexbox` for layout, making it super responsive and performant. Leaving most of the layout heavy lifting\r\n * to the browser. __note:__ The default styles use `height: 100%` which means your container must set an explicit\r\n * height (feel free to adjust the styles to suit your specific needs).\r\n *\r\n * Big Calendar is unopiniated about editing and moving events, preferring to let you implement it in a way that makes\r\n * the most sense to your app. It also tries not to be prescriptive about your event data structures, just tell it\r\n * how to find the start and end datetimes and you can pass it whatever you want.\r\n *\r\n * One thing to note is that, `react-big-calendar` treats event start/end dates as an _exclusive_ range.\r\n * which means that the event spans up to, but not including, the end date. In the case\r\n * of displaying events on whole days, end dates are rounded _up_ to the next day. So an\r\n * event ending on `Apr 8th 12:00:00 am` will not appear on the 8th, whereas one ending\r\n * on `Apr 8th 12:01:00 am` will. If you want _inclusive_ ranges consider providing a\r\n * function `endAccessor` that returns the end date + 1 day for those events that end at midnight.\r\n */\n\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Calendar, _React$Component);\n\n  function Calendar() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n\n    _this.getViews = function () {\n      var views = _this.props.views;\n\n      if (Array.isArray(views)) {\n        return (0, _transform.default)(views, function (obj, name) {\n          return obj[name] = _Views.default[name];\n        }, {});\n      }\n\n      if (typeof views === 'object') {\n        return (0, _mapValues.default)(views, function (value, key) {\n          if (value === true) {\n            return _Views.default[key];\n          }\n\n          return value;\n        });\n      }\n\n      return _Views.default;\n    };\n\n    _this.getView = function () {\n      var views = _this.getViews();\n\n      return views[_this.props.view];\n    };\n\n    _this.getDrilldownView = function (date) {\n      var _this$props = _this.props,\n          view = _this$props.view,\n          drilldownView = _this$props.drilldownView,\n          getDrilldownView = _this$props.getDrilldownView;\n      if (!getDrilldownView) return drilldownView;\n      return getDrilldownView(date, view, Object.keys(_this.getViews()));\n    };\n\n    _this.handleRangeChange = function (date, view) {\n      var _this$props2 = _this.props,\n          onRangeChange = _this$props2.onRangeChange,\n          localizer = _this$props2.localizer;\n\n      if (onRangeChange) {\n        if (view.range) {\n          onRangeChange(view.range(date, {\n            localizer: localizer\n          }));\n        } else {\n          process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(true, 'onRangeChange prop not supported for this view') : void 0;\n        }\n      }\n    };\n\n    _this.handleNavigate = function (action, newDate) {\n      var _this$props3 = _this.props,\n          view = _this$props3.view,\n          date = _this$props3.date,\n          getNow = _this$props3.getNow,\n          onNavigate = _this$props3.onNavigate,\n          props = (0, _objectWithoutPropertiesLoose2.default)(_this$props3, [\"view\", \"date\", \"getNow\", \"onNavigate\"]);\n\n      var ViewComponent = _this.getView();\n\n      var today = getNow();\n      date = (0, _move.default)(ViewComponent, (0, _extends2.default)({}, props, {\n        action: action,\n        date: newDate || date || today,\n        today: today\n      }));\n      onNavigate(date, view, action);\n\n      _this.handleRangeChange(date, ViewComponent);\n    };\n\n    _this.handleViewChange = function (view) {\n      if (view !== _this.props.view && isValidView(view, _this.props)) {\n        _this.props.onView(view);\n      }\n\n      var views = _this.getViews();\n\n      _this.handleRangeChange(_this.props.date, views[view]);\n    };\n\n    _this.handleSelectEvent = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      (0, _helpers.notify)(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleDoubleClickEvent = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      (0, _helpers.notify)(_this.props.onDoubleClickEvent, args);\n    };\n\n    _this.handleSelectSlot = function (slotInfo) {\n      (0, _helpers.notify)(_this.props.onSelectSlot, slotInfo);\n    };\n\n    _this.handleDrillDown = function (date, view) {\n      var onDrillDown = _this.props.onDrillDown;\n\n      if (onDrillDown) {\n        onDrillDown(date, view, _this.drilldownView);\n        return;\n      }\n\n      if (view) _this.handleViewChange(view);\n\n      _this.handleNavigate(_constants.navigate.DATE, date);\n    };\n\n    _this.state = {\n      context: _this.getContext(_this.props)\n    };\n    return _this;\n  }\n\n  var _proto = Calendar.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState({\n      context: this.getContext(nextProps)\n    });\n  };\n\n  _proto.getContext = function getContext(_ref2) {\n    var startAccessor = _ref2.startAccessor,\n        endAccessor = _ref2.endAccessor,\n        allDayAccessor = _ref2.allDayAccessor,\n        tooltipAccessor = _ref2.tooltipAccessor,\n        titleAccessor = _ref2.titleAccessor,\n        resourceAccessor = _ref2.resourceAccessor,\n        resourceIdAccessor = _ref2.resourceIdAccessor,\n        resourceTitleAccessor = _ref2.resourceTitleAccessor,\n        eventPropGetter = _ref2.eventPropGetter,\n        slotPropGetter = _ref2.slotPropGetter,\n        dayPropGetter = _ref2.dayPropGetter,\n        view = _ref2.view,\n        views = _ref2.views,\n        localizer = _ref2.localizer,\n        culture = _ref2.culture,\n        _ref2$messages = _ref2.messages,\n        messages = _ref2$messages === void 0 ? {} : _ref2$messages,\n        _ref2$components = _ref2.components,\n        components = _ref2$components === void 0 ? {} : _ref2$components,\n        _ref2$formats = _ref2.formats,\n        formats = _ref2$formats === void 0 ? {} : _ref2$formats;\n    var names = viewNames(views);\n    var msgs = (0, _messages.default)(messages);\n    return {\n      viewNames: names,\n      localizer: (0, _localizer.mergeWithDefaults)(localizer, culture, formats, msgs),\n      getters: {\n        eventProp: function eventProp() {\n          return eventPropGetter && eventPropGetter.apply(void 0, arguments) || {};\n        },\n        slotProp: function slotProp() {\n          return slotPropGetter && slotPropGetter.apply(void 0, arguments) || {};\n        },\n        dayProp: function dayProp() {\n          return dayPropGetter && dayPropGetter.apply(void 0, arguments) || {};\n        }\n      },\n      components: (0, _defaults.default)(components[view] || {}, (0, _omit.default)(components, names), {\n        eventWrapper: _NoopWrapper.default,\n        eventContainerWrapper: _NoopWrapper.default,\n        dayWrapper: _NoopWrapper.default,\n        dateCellWrapper: _NoopWrapper.default,\n        weekWrapper: _NoopWrapper.default,\n        timeSlotWrapper: _NoopWrapper.default\n      }),\n      accessors: {\n        start: (0, _accessors.wrapAccessor)(startAccessor),\n        end: (0, _accessors.wrapAccessor)(endAccessor),\n        allDay: (0, _accessors.wrapAccessor)(allDayAccessor),\n        tooltip: (0, _accessors.wrapAccessor)(tooltipAccessor),\n        title: (0, _accessors.wrapAccessor)(titleAccessor),\n        resource: (0, _accessors.wrapAccessor)(resourceAccessor),\n        resourceId: (0, _accessors.wrapAccessor)(resourceIdAccessor),\n        resourceTitle: (0, _accessors.wrapAccessor)(resourceTitleAccessor)\n      }\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        view = _this$props4.view,\n        toolbar = _this$props4.toolbar,\n        events = _this$props4.events,\n        style = _this$props4.style,\n        className = _this$props4.className,\n        elementProps = _this$props4.elementProps,\n        current = _this$props4.date,\n        getNow = _this$props4.getNow,\n        length = _this$props4.length,\n        showMultiDayTimes = _this$props4.showMultiDayTimes,\n        _0 = _this$props4.components,\n        _1 = _this$props4.formats,\n        _2 = _this$props4.messages,\n        _3 = _this$props4.culture,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props4, [\"view\", \"toolbar\", \"events\", \"style\", \"className\", \"elementProps\", \"date\", \"getNow\", \"length\", \"showMultiDayTimes\", \"components\", \"formats\", \"messages\", \"culture\"]);\n    current = current || getNow();\n    var View = this.getView();\n    var _this$state$context = this.state.context,\n        accessors = _this$state$context.accessors,\n        components = _this$state$context.components,\n        getters = _this$state$context.getters,\n        localizer = _this$state$context.localizer,\n        viewNames = _this$state$context.viewNames;\n    var CalToolbar = components.toolbar || _Toolbar.default;\n    var label = View.title(current, {\n      localizer: localizer,\n      length: length\n    });\n    return _react.default.createElement(\"div\", (0, _extends2.default)({}, elementProps, {\n      className: (0, _classnames.default)(className, 'rbc-calendar', props.rtl && 'rbc-is-rtl'),\n      style: style\n    }), toolbar && _react.default.createElement(CalToolbar, {\n      date: current,\n      view: view,\n      views: viewNames,\n      label: label,\n      onView: this.handleViewChange,\n      onNavigate: this.handleNavigate,\n      localizer: localizer\n    }), _react.default.createElement(View, (0, _extends2.default)({\n      ref: \"view\"\n    }, props, {\n      events: events,\n      date: current,\n      getNow: getNow,\n      length: length,\n      localizer: localizer,\n      getters: getters,\n      components: components,\n      accessors: accessors,\n      showMultiDayTimes: showMultiDayTimes,\n      getDrilldownView: this.getDrilldownView,\n      onNavigate: this.handleNavigate,\n      onDrillDown: this.handleDrillDown,\n      onSelectEvent: this.handleSelectEvent,\n      onDoubleClickEvent: this.handleDoubleClickEvent,\n      onSelectSlot: this.handleSelectSlot,\n      onShowMore: this._showMore\n    })));\n  };\n\n  return Calendar;\n}(_react.default.Component);\n\nCalendar.propTypes = {\n  localizer: _propTypes.default.object.isRequired,\n\n  /**\r\n   * Props passed to main calendar `<div>`.\r\n   *\r\n   */\n  elementProps: _propTypes.default.object,\n\n  /**\r\n   * The current date value of the calendar. Determines the visible view range.\r\n   * If `date` is omitted then the result of `getNow` is used; otherwise the\r\n   * current date is used.\r\n   *\r\n   * @controllable onNavigate\r\n   */\n  date: _propTypes.default.instanceOf(Date),\n\n  /**\r\n   * The current view of the calendar.\r\n   *\r\n   * @default 'month'\r\n   * @controllable onView\r\n   */\n  view: _propTypes.default.string,\n\n  /**\r\n   * The initial view set for the Calendar.\r\n   * @type Calendar.Views ('month'|'week'|'work_week'|'day'|'agenda')\r\n   * @default 'month'\r\n   */\n  defaultView: _propTypes.default.string,\n\n  /**\r\n   * An array of event objects to display on the calendar. Events objects\r\n   * can be any shape, as long as the Calendar knows how to retrieve the\r\n   * following details of the event:\r\n   *\r\n   *  - start time\r\n   *  - end time\r\n   *  - title\r\n   *  - whether its an \"all day\" event or not\r\n   *  - any resource the event may be related to\r\n   *\r\n   * Each of these properties can be customized or generated dynamically by\r\n   * setting the various \"accessor\" props. Without any configuration the default\r\n   * event should look like:\r\n   *\r\n   * ```js\r\n   * Event {\r\n   *   title: string,\r\n   *   start: Date,\r\n   *   end: Date,\r\n   *   allDay?: boolean\r\n   *   resource?: any,\r\n   * }\r\n   * ```\r\n   */\n  events: _propTypes.default.arrayOf(_propTypes.default.object),\n\n  /**\r\n   * Accessor for the event title, used to display event information. Should\r\n   * resolve to a `renderable` value.\r\n   *\r\n   * ```js\r\n   * string | (event: Object) => string\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  titleAccessor: _propTypes2.accessor,\n\n  /**\r\n   * Accessor for the event tooltip. Should\r\n   * resolve to a `renderable` value. Removes the tooltip if null.\r\n   *\r\n   * ```js\r\n   * string | (event: Object) => string\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  tooltipAccessor: _propTypes2.accessor,\n\n  /**\r\n   * Determines whether the event should be considered an \"all day\" event and ignore time.\r\n   * Must resolve to a `boolean` value.\r\n   *\r\n   * ```js\r\n   * string | (event: Object) => boolean\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  allDayAccessor: _propTypes2.accessor,\n\n  /**\r\n   * The start date/time of the event. Must resolve to a JavaScript `Date` object.\r\n   *\r\n   * ```js\r\n   * string | (event: Object) => Date\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  startAccessor: _propTypes2.accessor,\n\n  /**\r\n   * The end date/time of the event. Must resolve to a JavaScript `Date` object.\r\n   *\r\n   * ```js\r\n   * string | (event: Object) => Date\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  endAccessor: _propTypes2.accessor,\n\n  /**\r\n   * Returns the id of the `resource` that the event is a member of. This\r\n   * id should match at least one resource in the `resources` array.\r\n   *\r\n   * ```js\r\n   * string | (event: Object) => Date\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  resourceAccessor: _propTypes2.accessor,\n\n  /**\r\n   * An array of resource objects that map events to a specific resource.\r\n   * Resource objects, like events, can be any shape or have any properties,\r\n   * but should be uniquly identifiable via the `resourceIdAccessor`, as\r\n   * well as a \"title\" or name as provided by the `resourceTitleAccessor` prop.\r\n   */\n  resources: _propTypes.default.arrayOf(_propTypes.default.object),\n\n  /**\r\n   * Provides a unique identifier for each resource in the `resources` array\r\n   *\r\n   * ```js\r\n   * string | (resource: Object) => any\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  resourceIdAccessor: _propTypes2.accessor,\n\n  /**\r\n   * Provides a human readable name for the resource object, used in headers.\r\n   *\r\n   * ```js\r\n   * string | (resource: Object) => any\r\n   * ```\r\n   *\r\n   * @type {(func|string)}\r\n   */\n  resourceTitleAccessor: _propTypes2.accessor,\n\n  /**\r\n   * Determines the current date/time which is highlighted in the views.\r\n   *\r\n   * The value affects which day is shaded and which time is shown as\r\n   * the current time. It also affects the date used by the Today button in\r\n   * the toolbar.\r\n   *\r\n   * Providing a value here can be useful when you are implementing time zones\r\n   * using the `startAccessor` and `endAccessor` properties.\r\n   *\r\n   * @type {func}\r\n   * @default () => new Date()\r\n   */\n  getNow: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when the `date` value changes.\r\n   *\r\n   * @controllable date\r\n   */\n  onNavigate: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when the `view` value changes.\r\n   *\r\n   * @controllable view\r\n   */\n  onView: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when date header, or the truncated events links are clicked\r\n   *\r\n   */\n  onDrillDown: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when the visible date range changes. Returns an Array of dates\r\n   * or an object with start and end dates for BUILTIN views.\r\n   *\r\n   * Custom views may return something different.\r\n   */\n  onRangeChange: _propTypes.default.func,\n\n  /**\r\n   * A callback fired when a date selection is made. Only fires when `selectable` is `true`.\r\n   *\r\n   * ```js\r\n   * (\r\n   *   slotInfo: {\r\n   *     start: Date,\r\n   *     end: Date,\r\n   *     slots: Array<Date>,\r\n   *     action: \"select\" | \"click\" | \"doubleClick\",\r\n   *     bounds: ?{ // For \"select\" action\r\n   *       x: number,\r\n   *       y: number,\r\n   *       top: number,\r\n   *       right: number,\r\n   *       left: number,\r\n   *       bottom: number,\r\n   *     },\r\n   *     box: ?{ // For \"click\" or \"doubleClick\" actions\r\n   *       clientX: number,\r\n   *       clientY: number,\r\n   *       x: number,\r\n   *       y: number,\r\n   *     },\r\n   *   }\r\n   * ) => any\r\n   * ```\r\n   */\n  onSelectSlot: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when a calendar event is selected.\r\n   *\r\n   * ```js\r\n   * (event: Object, e: SyntheticEvent) => any\r\n   * ```\r\n   *\r\n   * @controllable selected\r\n   */\n  onSelectEvent: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when a calendar event is clicked twice.\r\n   *\r\n   * ```js\r\n   * (event: Object, e: SyntheticEvent) => void\r\n   * ```\r\n   */\n  onDoubleClickEvent: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when dragging a selection in the Time views.\r\n   *\r\n   * Returning `false` from the handler will prevent a selection.\r\n   *\r\n   * ```js\r\n   * (range: { start: Date, end: Date }) => ?boolean\r\n   * ```\r\n   */\n  onSelecting: _propTypes.default.func,\n\n  /**\r\n   * The selected event, if any.\r\n   */\n  selected: _propTypes.default.object,\n\n  /**\r\n   * An array of built-in view names to allow the calendar to display.\r\n   * accepts either an array of builtin view names,\r\n   *\r\n   * ```jsx\r\n   * views={['month', 'day', 'agenda']}\r\n   * ```\r\n   * or an object hash of the view name and the component (or boolean for builtin).\r\n   *\r\n   * ```jsx\r\n   * views={{\r\n   *   month: true,\r\n   *   week: false,\r\n   *   myweek: WorkWeekViewComponent,\r\n   * }}\r\n   * ```\r\n   *\r\n   * Custom views can be any React component, that implements the following\r\n   * interface:\r\n   *\r\n   * ```js\r\n   * interface View {\r\n   *   static title(date: Date, { formats: DateFormat[], culture: string?, ...props }): string\r\n   *   static navigate(date: Date, action: 'PREV' | 'NEXT' | 'DATE'): Date\r\n   * }\r\n   * ```\r\n   *\r\n   * @type Calendar.Views ('month'|'week'|'work_week'|'day'|'agenda')\r\n   * @View\r\n   ['month', 'week', 'day', 'agenda']\r\n   */\n  views: _propTypes2.views,\n\n  /**\r\n   * The string name of the destination view for drill-down actions, such\r\n   * as clicking a date header, or the truncated events links. If\r\n   * `getDrilldownView` is also specified it will be used instead.\r\n   *\r\n   * Set to `null` to disable drill-down actions.\r\n   *\r\n   * ```js\r\n   * <BigCalendar\r\n   *   drilldownView=\"agenda\"\r\n   * />\r\n   * ```\r\n   */\n  drilldownView: _propTypes.default.string,\n\n  /**\r\n   * Functionally equivalent to `drilldownView`, but accepts a function\r\n   * that can return a view name. It's useful for customizing the drill-down\r\n   * actions depending on the target date and triggering view.\r\n   *\r\n   * Return `null` to disable drill-down actions.\r\n   *\r\n   * ```js\r\n   * <BigCalendar\r\n   *   getDrilldownView={(targetDate, currentViewName, configuredViewNames) =>\r\n   *     if (currentViewName === 'month' && configuredViewNames.includes('week'))\r\n   *       return 'week'\r\n   *\r\n   *     return null;\r\n   *   }}\r\n   * />\r\n   * ```\r\n   */\n  getDrilldownView: _propTypes.default.func,\n\n  /**\r\n   * Determines the end date from date prop in the agenda view\r\n   * date prop + length (in number of days) = end date\r\n   */\n  length: _propTypes.default.number,\n\n  /**\r\n   * Determines whether the toolbar is displayed\r\n   */\n  toolbar: _propTypes.default.bool,\n\n  /**\r\n   * Show truncated events in an overlay when you click the \"+_x_ more\" link.\r\n   */\n  popup: _propTypes.default.bool,\n\n  /**\r\n   * Distance in pixels, from the edges of the viewport, the \"show more\" overlay should be positioned.\r\n   *\r\n   * ```jsx\r\n   * <BigCalendar popupOffset={30}/>\r\n   * <BigCalendar popupOffset={{x: 30, y: 20}}/>\r\n   * ```\r\n   */\n  popupOffset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    x: _propTypes.default.number,\n    y: _propTypes.default.number\n  })]),\n\n  /**\r\n   * Allows mouse selection of ranges of dates/times.\r\n   *\r\n   * The 'ignoreEvents' option prevents selection code from running when a\r\n   * drag begins over an event. Useful when you want custom event click or drag\r\n   * logic\r\n   */\n  selectable: _propTypes.default.oneOf([true, false, 'ignoreEvents']),\n\n  /**\r\n   * Specifies the number of miliseconds the user must press and hold on the screen for a touch\r\n   * to be considered a \"long press.\" Long presses are used for time slot selection on touch\r\n   * devices.\r\n   *\r\n   * @type {number}\r\n   * @default 250\r\n   */\n  longPressThreshold: _propTypes.default.number,\n\n  /**\r\n   * Determines the selectable time increments in week and day views\r\n   */\n  step: _propTypes.default.number,\n\n  /**\r\n   * The number of slots per \"section\" in the time grid views. Adjust with `step`\r\n   * to change the default of 1 hour long groups, with 30 minute slots.\r\n   */\n  timeslots: _propTypes.default.number,\n\n  /**\r\n   *Switch the calendar to a `right-to-left` read direction.\r\n   */\n  rtl: _propTypes.default.bool,\n\n  /**\r\n   * Optionally provide a function that returns an object of className or style props\r\n   * to be applied to the the event node.\r\n   *\r\n   * ```js\r\n   * (\r\n   * \tevent: Object,\r\n   * \tstart: Date,\r\n   * \tend: Date,\r\n   * \tisSelected: boolean\r\n   * ) => { className?: string, style?: Object }\r\n   * ```\r\n   */\n  eventPropGetter: _propTypes.default.func,\n\n  /**\r\n   * Optionally provide a function that returns an object of className or style props\r\n   * to be applied to the the time-slot node. Caution! Styles that change layout or\r\n   * position may break the calendar in unexpected ways.\r\n   *\r\n   * ```js\r\n   * (date: Date) => { className?: string, style?: Object }\r\n   * ```\r\n   */\n  slotPropGetter: _propTypes.default.func,\n\n  /**\r\n   * Optionally provide a function that returns an object of className or style props\r\n   * to be applied to the the day background. Caution! Styles that change layout or\r\n   * position may break the calendar in unexpected ways.\r\n   *\r\n   * ```js\r\n   * (date: Date) => { className?: string, style?: Object }\r\n   * ```\r\n   */\n  dayPropGetter: _propTypes.default.func,\n\n  /**\r\n   * Support to show multi-day events with specific start and end times in the\r\n   * main time grid (rather than in the all day header).\r\n   *\r\n   * **Note: This may cause calendars with several events to look very busy in\r\n   * the week and day views.**\r\n   */\n  showMultiDayTimes: _propTypes.default.bool,\n\n  /**\r\n   * Constrains the minimum _time_ of the Day and Week views.\r\n   */\n  min: _propTypes.default.instanceOf(Date),\n\n  /**\r\n   * Constrains the maximum _time_ of the Day and Week views.\r\n   */\n  max: _propTypes.default.instanceOf(Date),\n\n  /**\r\n   * Determines how far down the scroll pane is initially scrolled down.\r\n   */\n  scrollToTime: _propTypes.default.instanceOf(Date),\n\n  /**\r\n   * Specify a specific culture code for the Calendar.\r\n   *\r\n   * **Note: it's generally better to handle this globally via your i18n library.**\r\n   */\n  culture: _propTypes.default.string,\n\n  /**\r\n   * Localizer specific formats, tell the Calendar how to format and display dates.\r\n   *\r\n   * `format` types are dependent on the configured localizer; both Moment and Globalize\r\n   * accept strings of tokens according to their own specification, such as: `'DD mm yyyy'`.\r\n   *\r\n   * ```jsx\r\n   * let formats = {\r\n   *   dateFormat: 'dd',\r\n   *\r\n   *   dayFormat: (date, , localizer) =>\r\n   *     localizer.format(date, 'DDD', culture),\r\n   *\r\n   *   dayRangeHeaderFormat: ({ start, end }, culture, localizer) =>\r\n   *     localizer.format(start, { date: 'short' }, culture) + ' — ' +\r\n   *     localizer.format(end, { date: 'short' }, culture)\r\n   * }\r\n   *\r\n   * <Calendar formats={formats} />\r\n   * ```\r\n   *\r\n   * All localizers accept a function of\r\n   * the form `(date: Date, culture: ?string, localizer: Localizer) -> string`\r\n   */\n  formats: _propTypes.default.shape({\n    /**\r\n     * Format for the day of the month heading in the Month view.\r\n     * e.g. \"01\", \"02\", \"03\", etc\r\n     */\n    dateFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * A day of the week format for Week and Day headings,\r\n     * e.g. \"Wed 01/04\"\r\n     *\r\n     */\n    dayFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * Week day name format for the Month week day headings,\r\n     * e.g: \"Sun\", \"Mon\", \"Tue\", etc\r\n     *\r\n     */\n    weekdayFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * The timestamp cell formats in Week and Time views, e.g. \"4:00 AM\"\r\n     */\n    timeGutterFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * Toolbar header format for the Month view, e.g \"2015 April\"\r\n     *\r\n     */\n    monthHeaderFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * Toolbar header format for the Week views, e.g. \"Mar 29 - Apr 04\"\r\n     */\n    dayRangeHeaderFormat: _propTypes2.dateRangeFormat,\n\n    /**\r\n     * Toolbar header format for the Day view, e.g. \"Wednesday Apr 01\"\r\n     */\n    dayHeaderFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * Toolbar header format for the Agenda view, e.g. \"4/1/2015 — 5/1/2015\"\r\n     */\n    agendaHeaderFormat: _propTypes2.dateRangeFormat,\n\n    /**\r\n     * A time range format for selecting time slots, e.g \"8:00am — 2:00pm\"\r\n     */\n    selectRangeFormat: _propTypes2.dateRangeFormat,\n    agendaDateFormat: _propTypes2.dateFormat,\n    agendaTimeFormat: _propTypes2.dateFormat,\n    agendaTimeRangeFormat: _propTypes2.dateRangeFormat,\n\n    /**\r\n     * Time range displayed on events.\r\n     */\n    eventTimeRangeFormat: _propTypes2.dateRangeFormat,\n\n    /**\r\n     * An optional event time range for events that continue onto another day\r\n     */\n    eventTimeRangeStartFormat: _propTypes2.dateFormat,\n\n    /**\r\n     * An optional event time range for events that continue from another day\r\n     */\n    eventTimeRangeEndFormat: _propTypes2.dateFormat\n  }),\n\n  /**\r\n   * Customize how different sections of the calendar render by providing custom Components.\r\n   * In particular the `Event` component can be specified for the entire calendar, or you can\r\n   * provide an individual component for each view type.\r\n   *\r\n   * ```jsx\r\n   * let components = {\r\n   *   event: MyEvent, // used by each view (Month, Day, Week)\r\n   *   eventWrapper: MyEventWrapper,\r\n   *   eventContainerWrapper: MyEventContainerWrapper,\r\n   *   dayWrapper: MyDayWrapper,\r\n   *   dateCellWrapper: MyDateCellWrapper,\r\n   *   timeSlotWrapper: MyTimeSlotWrapper,\r\n   *   timeGutterHeader: MyTimeGutterWrapper,\r\n   *   toolbar: MyToolbar,\r\n   *   agenda: {\r\n   *   \t event: MyAgendaEvent // with the agenda view use a different component to render events\r\n   *     time: MyAgendaTime,\r\n   *     date: MyAgendaDate,\r\n   *   },\r\n   *   day: {\r\n   *     header: MyDayHeader,\r\n   *     event: MyDayEvent,\r\n   *   },\r\n   *   week: {\r\n   *     header: MyWeekHeader,\r\n   *     event: MyWeekEvent,\r\n   *   },\r\n   *   month: {\r\n   *     header: MyMonthHeader,\r\n   *     dateHeader: MyMonthDateHeader,\r\n   *     event: MyMonthEvent,\r\n   *   }\r\n   * }\r\n   * <Calendar components={components} />\r\n   * ```\r\n   */\n  components: _propTypes.default.shape({\n    event: _propTypes2.elementType,\n    eventWrapper: _propTypes2.elementType,\n    eventContainerWrapper: _propTypes2.elementType,\n    dayWrapper: _propTypes2.elementType,\n    dateCellWrapper: _propTypes2.elementType,\n    timeSlotWrapper: _propTypes2.elementType,\n    timeGutterHeader: _propTypes2.elementType,\n    toolbar: _propTypes2.elementType,\n    agenda: _propTypes.default.shape({\n      date: _propTypes2.elementType,\n      time: _propTypes2.elementType,\n      event: _propTypes2.elementType\n    }),\n    day: _propTypes.default.shape({\n      header: _propTypes2.elementType,\n      event: _propTypes2.elementType\n    }),\n    week: _propTypes.default.shape({\n      header: _propTypes2.elementType,\n      event: _propTypes2.elementType\n    }),\n    month: _propTypes.default.shape({\n      header: _propTypes2.elementType,\n      dateHeader: _propTypes2.elementType,\n      event: _propTypes2.elementType\n    })\n  }),\n\n  /**\r\n   * String messages used throughout the component, override to provide localizations\r\n   */\n  messages: _propTypes.default.shape({\n    allDay: _propTypes.default.node,\n    previous: _propTypes.default.node,\n    next: _propTypes.default.node,\n    today: _propTypes.default.node,\n    month: _propTypes.default.node,\n    week: _propTypes.default.node,\n    day: _propTypes.default.node,\n    agenda: _propTypes.default.node,\n    date: _propTypes.default.node,\n    time: _propTypes.default.node,\n    event: _propTypes.default.node,\n    noEventsInRange: _propTypes.default.node,\n    showMore: _propTypes.default.func\n  })\n};\nCalendar.defaultProps = {\n  elementProps: {},\n  popup: false,\n  toolbar: true,\n  view: _constants.views.MONTH,\n  views: [_constants.views.MONTH, _constants.views.WEEK, _constants.views.DAY, _constants.views.AGENDA],\n  step: 30,\n  length: 30,\n  drilldownView: _constants.views.DAY,\n  titleAccessor: 'title',\n  tooltipAccessor: 'title',\n  allDayAccessor: 'allDay',\n  startAccessor: 'start',\n  endAccessor: 'end',\n  resourceAccessor: 'resourceId',\n  resourceIdAccessor: 'id',\n  resourceTitleAccessor: 'title',\n  longPressThreshold: 250,\n  getNow: function getNow() {\n    return new Date();\n  }\n};\n\nvar _default = (0, _uncontrollable.default)(Calendar, {\n  view: 'onView',\n  date: 'onNavigate',\n  selected: 'onSelectEvent'\n});\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}