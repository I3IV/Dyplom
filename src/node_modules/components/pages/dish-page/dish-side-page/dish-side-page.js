import React from "react";
import PropTypes from "prop-types";
import { withStyles, MuiThemeProvider } from "@material-ui/core/styles";
import Divider from "@material-ui/core/Divider";
import AddIcon from "@material-ui/icons/Add";
import RemoveIcon from "@material-ui/icons/Remove";
import RadioSelect from "shared-components/radio-select";
import ProductsList from "shared-components/products-list";
import TextField from "@material-ui/core/TextField";
import Typography from "@material-ui/core/Typography";
import IconButton from "@material-ui/core/IconButton";
import Button from "@material-ui/core/Button";
import { productsSelectItems} from "api";
import styles from "./styles";
import theme, { defaultTheme } from "./themes";

const formatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2
});
class DishSidePage extends React.Component {
  state = {
    products: [],
    count: 1
  };
  handleApply = () => {
    if(!localStorage.getItem("cart")){
      localStorage.setItem("cart", JSON.stringify({dishes:[], totalPrice: 0}))
    }
    const localStorageState = JSON.parse(localStorage.getItem("cart"))
    const {dishes, totalPrice} = localStorageState;
    const {dish, count, sizes, size_id } = this.state;
    const dishPrice = sizes.find(size => size.id == size_id).price * count;
    const newDish = {
      ...dish,
      name: dish.Name,
      size_id,
      count,
      price: dishPrice
    }
    const newCart = {
      dishes:[...dishes, newDish],
      totalPrice: totalPrice + dishPrice
    }
    localStorage.setItem("cart", JSON.stringify(newCart))
  }
  toggleProperty(arr, id, propName) {
    const idx = arr.findIndex(el => el.value === id);
    const oldItem = arr[idx];
    const newItem = { ...oldItem, [propName]: !oldItem[propName] };

    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }
  onDishSizeChange = size_id => {
    this.setState({
      size_id
    });
  };
  onProductChange = product_id => {
    const { products } = this.state;
    const changedProducts = this.toggleProperty(
      products,
      product_id,
      "checked"
    );
    this.setState({
      products: changedProducts
    });
  };
  handleChange = name => event => {
    this.setState({
      [name]: event.target.value
    });
  };
  onDishUp = () => {
    this.setState({
      count: this.state.count + 1
    });
  };
  onDishDown = () => {
    if (this.state.count - 1 >= 1) {
      this.setState({
        count: this.state.count - 1
      });
    }
  };
  transformDishSizes = _sizes => {
    return _sizes.map(size => ({
      id: size.id,
      name: size.DishSizeName,
      price: size.price
    }));
  };
  componentWillReceiveProps(nextProps) {
    if (nextProps.dishToShow.id !== this.state.id) {
      const { Sizes, id } = nextProps.dishToShow;
      this.setState({
        dish: nextProps.dishToShow,
        size_id: Sizes[0].id,
        sizes: this.transformDishSizes(Sizes),
        products: productsSelectItems(id).map(product => ({
          ...product,
          checked: true
        }))
      });
    }
  }

  render() {
    const { classes } = this.props;
    const { count, sizes, size_id, products, dish } = this.state;
    if (!dish) return "";
    const { id, Name, Description } = dish;
    const Price = sizes.find(size => size.id == size_id).price;
    return <div className={classes.list}>
        <MuiThemeProvider theme={theme}>
          <div className={classes.content}>
            <img src={`/images/dishes/${id}.jpg`} alt={Name} className={classes.dishImg} />

            <div className={classes.topDesc}>
              <Typography variant="h6" color="primary" gutterBottom>
                {Name}
              </Typography>
              <Typography variant="body2" color="secondary" gutterBottom>
                {Description}
              </Typography>
            </div>
            <Divider />
            <MuiThemeProvider theme={defaultTheme}>
              <Typography className={classes.text} variant="h6" color="textSecondary">
                Select size
              </Typography>
              {size_id && <RadioSelect items={sizes} selected={size_id} onChange={this.onDishSizeChange} />}
              <Divider />
              <Typography className={classes.text} variant="h6" color="textSecondary">
                Select products
              </Typography>
              {products && <ProductsList items={products} onProductChange={this.onProductChange} />}
              <Divider />
              <Typography className={classes.text} variant="h6" color="textSecondary">
                Comment
              </Typography>
            </MuiThemeProvider>
            <TextField id="filled-textarea" placeholder="Enter your comment" multiline rows="4" className={classes.textField} margin="normal" variant="filled" />
            <Divider />
          </div>
          <div className={classes.bottomPanel}>
            <div className={classes.flexRow}>
              <div className={`${classes.flexRow} ${classes.flexPrice}`}>
                <IconButton className={classes.iconButton} aria-label="Remove" onClick={this.onDishDown}>
                  <RemoveIcon fontSize="small" />
                </IconButton>
                <span>{count}</span>
                <IconButton className={classes.iconButton} aria-label="Add" onClick={this.onDishUp}>
                  <AddIcon fontSize="small" />
                </IconButton>
              </div>
              <Typography className={classes.price} variant="h6" color="textPrimary" align="center">
                {formatter.format(count * Price)}
              </Typography>
            </div>
            <MuiThemeProvider theme={defaultTheme}>
              <Button onClick={this.handleApply} color="secondary" variant="outlined" className={classes.button}>
                Add to cart
              </Button>
            </MuiThemeProvider>
          </div>
        </MuiThemeProvider>
      </div>;
  }
}

DishSidePage.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(DishSidePage);
