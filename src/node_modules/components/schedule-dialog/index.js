import React from 'react';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import SelectControl from 'components/select-control';
import ItemsList from 'components/items-list';
import DeleteIcon from '@material-ui/icons/Delete';
import './schedule-dialog.css';
import { restaurantsSelectItems, dishCategoriesSelectItems,
         restaurantIdToName,  dishesSelectItems, dishIdToName } from 'api'
export default class ScheduleDialog extends React.Component {
  state = {
    open: false,
    event: { dishes: [] }
  };

  dishAdd = (dish) =>{
    this.setState({
      event: { ...this.state.event, dishes: [this.state.event.dishes, dish] }
    });
  }

  increaseProperty(arr, id, propName) {
    const idx = arr.findIndex((el) => el.id === id);
    if(idx === -1) return;

    const oldItem = arr[idx];
    const newItem = {...oldItem, [propName]: ++oldItem[propName]};
    return [
      ...arr.slice(0,idx),
      newItem,
      ...arr.slice(idx + 1)
    ]
  }
// event: {...this.state.event, ...nextProps.event}
 componentWillReceiveProps(nextProps) {
  if (nextProps.dialogOpen !== this.state.open) {
    this.setState({ open: nextProps.dialogOpen, event: nextProps.event });
  }
}
  onSelectChange = ({name, value}) => {
    this.setState({
      event: { ...this.state.event, [name]: value }
    });
  };
  onRestaurantChange = ({name, value}) => {
    this.setState({
      event: { ...this.state.event, [name]: restaurantIdToName(value), restaurant_id: value },
    });
  };
  onDishCategoryChange = ({name, value}) => {
    this.setState({
      event: { ...this.state.event,  category_id: value },
    });
  };
  onDishChange = ({name, value}) => {
    this.setState({
        selectedDish: {name: dishIdToName(value), id: value },
    });
  };
  onDishAdd = () => {
    const dish = this.state.selectedDish;

    if(dish)
    {
      const dishes = this.state.event.dishes;
      const changedDishes = this.increaseProperty(dishes, dish.id, 'count');

      if(changedDishes){
        this.setState({
          event: { ...this.state.event, dishes: changedDishes }
        });
      }
      else{
        this.setState({
          event: { ...this.state.event, dishes: [...this.state.event.dishes, {...this.state.selectedDish, count:1 } ] }
        });
      }
    }
  };

  handleClickOpen = () => {
    this.setState({ open: true });
  };
  handleClose = () => {
    this.setState({ open: false });
  };

  handleApply = () => {
    this.props.handleApply(this.state.event);
    this.setState({ open: false });
  };
  handleDelete = () => {
    this.props.handleDelete(this.state.event);
    this.setState({ open: false });
  };

  render() {
console.log("rendering... State=", this.state);
    const {restaurant_id, category_id, dishes} = this.state.event;
    console.log("DISHES", this.state.event.dishes);
    return (
      <div >
        <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          aria-labelledby="form-dialog-title"
        >
        <DialogTitle id="form-dialog-title">Schedule Item</DialogTitle>
            <DialogContent className="dialog-elements" >
              <div className="selects">
                <SelectControl onSelectChange={this.onRestaurantChange}
                                 name = 'title'
                                 value = {restaurant_id}
                                 items = {restaurantsSelectItems}
                                 emptyValue = 'Select restaurant'/>
                <SelectControl onSelectChange={this.onDishCategoryChange}
                                name = 'category'
                                value = {category_id}
                                items = {dishCategoriesSelectItems(restaurant_id)}
                                emptyValue = 'Select category'/>
                 <SelectControl onSelectChange={this.onDishChange}
                                name = 'dish'
                                items = {dishesSelectItems(category_id)}
                                emptyValue = 'Select dish'/>
                <Button onClick={this.onDishAdd} color="secondary">
                  Add
                </Button>
              </div>
              <ItemsList items={dishes}/>
            </DialogContent>


          <DialogActions>
          <Button onClick={ this.handleDelete } color="secondary">
            <DeleteIcon />
          </Button>
            <Button onClick={this.handleClose} color="primary">
              Close
            </Button>
            <Button onClick={this.handleApply} color="primary">
              Apply filter
            </Button>
          </DialogActions>
        </Dialog>
      </div>
    );
  }
}
