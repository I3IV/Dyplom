import React, { Component } from "react";
import { Link } from "react-router-dom";

import Paper from "@material-ui/core/Paper";
import Button from "@material-ui/core/Button";
import "../registration-page.css";
import { Redirect } from "react-router-dom";
import { ValidatorForm, TextValidator } from "react-material-ui-form-validator";
import Spinner from "shared-components/spinner";
import {authStore, citiesStore} from "store";
import { signInCustomer, signUpCustomer } from "api";

import { withStyles } from "@material-ui/core/styles";
import styles from "../styles";
import {
    TextField
} from "@material-ui/core";
import * as R from "ramda";
import CitiesSelect from "shared-components/cities-select";

const strongRegexPass = new RegExp(
  "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})"
);
const strongRegexNameSurname = new RegExp("^(?=.*[a-z])(?=.*[A-Z])");
const strongRegexPhone = new RegExp(
  "^(\\+(([0-9]){1,2})[-.])?((((([0-9]){2,3})[-.]){1,2}([0-9]{4,10}))|([0-9]{9}))$"
);

class RegistrationForm extends Component {
    state = {
        isLoggedIn: false,
        email: "",
        name: "",
        surname: "",
        phone: "",
        restaurant: '',
        password: "",
        passwordpass: "",
        CityName: "",
        StreetName: "",
        StreetNumber: "",
        ZipCode: ""
    };

    componentDidMount() {
        ValidatorForm.addValidationRule("password", value =>
            strongRegexPass.test(value)
        );

        ValidatorForm.addValidationRule("name", value =>
            strongRegexNameSurname.test(value)
        );

        ValidatorForm.addValidationRule("surname", value =>
            strongRegexNameSurname.test(value)
        );

        ValidatorForm.addValidationRule("phone", value =>
            strongRegexPhone.test(value)
        );

        ValidatorForm.addValidationRule(
            "isPasswordMatch",
            value => value === this.state.password
        );
    }

    componentWillReceiveProps(nextProps) {
        if (
            !R.equals(this.props.address, nextProps.address) &&
            !R.isEmpty(nextProps.address)
        ) {
            this.setState(
                R.zipObj(
                    ["CityName", "StreetName", "StreetNumber", "ZipCode"],
                    R.compose(
                        R.split(","),
                        R.trim
                    )(nextProps.address)
                )
            );
        }
    }

    onAddressEntered = addressString => {
        const { SelectAddresses } = this.state;

        const toArr = val => R.map(R.trim, R.split(",", val));
        const address = R.zipObj(
            ["StreetName", "StreetNumber", "ZipCode"],
            R.takeLast(3, toArr(addressString))
        );

        const addr = SelectAddresses
            ? R.find(
                a => R.equals(toArr(a.label), toArr(addressString)),
                SelectAddresses
            )
            : undefined;

        this.setState({
            address_id: addr ? addr.value : 0,
            address
        });
    };

    signIn() {
        const {email, password} = this.state;
        signInCustomer(email, password)
            .then(() => {
                authStore.authenticate(this.state.user);
                this.setState({error: null, isLoggedIn: true, loading: false});
            })
            .catch(error => {
                authStore.authenticate(false);
                this.setState({error, loading: false});
            });
    }

    signUp() {
        const {email, password, name, restaurant, surname, phone, CityName, StreetName, StreetNumber, ZipCode} = this.state;
        this.setState({loading: true});
        const user = {
            email,
            password,
            StaffName: name,
            StaffSurname: surname,
            RestaurantName: restaurant,
            StaffPhone: phone,
            CityName: CityName,
            StreetName: StreetName,
            StreetNumber:StreetNumber,
            ZipCode: ZipCode
        };
        this.setState({
            user
        });
        signUpCustomer(user)
            .then(() => this.signIn())
            .catch(error => {
                this.setState({error, loading: false});
            });
    }

    updateField = ev => {
        this.setState({[ev.target.name]: ev.target.value});
    };

    handleSubmit = () => {
        this.signUp();
    };

    handleChange = name => event => {
        const oldState = this.state;
        oldState[name] = event.target.value;

        this.setState({ [name]: event.target.value });

        const { CityName, StreetName, StreetNumber, ZipCode } = oldState;
        this.onAddressEntered(
            `${CityName}, ${StreetName}, ${StreetNumber}, ${ZipCode}`
        );
    };

    render() {
        const { classes } = this.props;
        const { CityName, StreetName, StreetNumber, ZipCode } = this.state;
        const summary = R.all(R.isEmpty)([
            CityName,
            StreetName,
            StreetNumber,
            ZipCode
        ])
            ? `Enter the delivery address`
            : `${CityName}, ${StreetName}, ${StreetNumber}, ${ZipCode}`;
        if (this.state.error) console.log(`Something wrong: ${this.state.error}`);
        if (this.state.loading) return <Spinner/>;
        if (!this.state.loading && this.state.isLoggedIn) {
            authStore.setManager(true);
            return <Redirect to="/"/>;
        }
        return (
            <div className="form">
                <ValidatorForm
                    ref="form"
                    onSubmit={this.handleSubmit}
                    onError={errors => console.log(errors)}
                >
                    <Paper className="paper-form" elevation={15} style={{height: 'fit-content'}}>
                        <span className="label">Registration</span>
                        <p>{this.state.error && `Something wrong: ${this.state.error}`}</p>
                        <div className="row">
                            <TextValidator
                                className="input"
                                label="Name"
                                value={this.state.name}
                                name="name"
                                type="name"
                                margin="normal"
                                variant="outlined"
                                placeholder="Name"
                                validators={["name", "required"]}
                                errorMessages={[
                                    "The name must contain lowercase and uppercase",
                                    "Name is required"
                                ]}
                                onChange={this.updateField}
                            />
                            <span className="br"/>
                            <TextValidator
                                className="input"
                                label="Surname"
                                type="Surname"
                                margin="normal"
                                variant="outlined"
                                value={this.state.surname}
                                name="surname"
                                placeholder="Surname"
                                validators={["surname", "required"]}
                                errorMessages={[
                                    "The surname must contain lowercase and uppercase",
                                    "Surname is required"
                                ]}
                                onChange={this.updateField}
                            />
                        </div>
                        <div className="row">
                            <TextValidator
                                className="input"
                                label="Email"
                                margin="normal"
                                variant="outlined"
                                value={this.state.email}
                                name="email"
                                placeholder="example@domain.com"
                                validators={["required", "isEmail"]}
                                errorMessages={["The email is required", "Email is not valid"]}
                                onChange={this.updateField}
                            />
                            <span className="br"/>
                            <TextValidator
                                className="input"
                                label="Phone Number"
                                margin="normal"
                                variant="outlined"
                                value={this.state.phone}
                                name="phone"
                                type="phone"
                                validators={["phone", "required"]}
                                errorMessages={[
                                    "The phone must contain only numbers",
                                    "Phone is required"
                                ]}
                                placeholder="+48 888 888 888"
                                onChange={this.updateField}
                            />
                        </div>
                        <div className='row'>
                            <TextValidator
                                className="input"
                                label="Restaurant name"
                                margin="normal"
                                variant="outlined"
                                value={this.state.restaurant}
                                name="restaurant"
                                validators={["required"]}
                                errorMessages={[
                                    "Restaurant name is required"
                                ]}
                                placeholder="Restaurant Name"
                                onChange={this.updateField}
                            />
                        </div>

                        <div className='row'>
                        <div className={classes.column}>
                            <div className={classes.row}>
                                <CitiesSelect
                                    cities={citiesStore.cities}
                                    value={citiesStore.selectedCity}
                                    handleChange={this.handleChange('CityName')}
                                />
                                <TextValidator
                                    className="input"
                                    label="Street"
                                    margin="normal"
                                    name="street"
                                    variant="outlined"
                                    type="text"
                                    value={StreetName}
                                    validators={["required"]}
                                    errorMessages={[
                                        "Restaurant street is required"
                                    ]}
                                    placeholder="Restaurant street"
                                    onChange={this.handleChange("StreetName")}
                                />
                            </div>
                            <div className={classes.row}>
                                <TextValidator
                                    className="input"
                                    label="Building"
                                    margin="normal"
                                    variant="outlined"
                                    type="text"
                                    name="building"
                                    value={StreetNumber}
                                    validators={["required"]}
                                    errorMessages={[
                                        "Restaurant street number is required"
                                    ]}
                                    placeholder="Restaurant street number"
                                    onChange={this.handleChange("StreetNumber")}
                                />
                                <TextValidator
                                    className="input"
                                    label="Zip code"
                                    margin="normal"
                                    variant="outlined"
                                    type="text"
                                    value={ZipCode}
                                    name="zip-code"
                                    validators={["required"]}
                                    errorMessages={[
                                        "Restaurant zip-code is required"
                                    ]}
                                    placeholder="Restaurant zip-code"
                                    onChange={this.handleChange("ZipCode")}
                                />
                            </div>
                        </div>
                        </div>
                        <div className="row">
                            <TextValidator
                                className="input"
                                label="Password"
                                margin="normal"
                                variant="outlined"
                                value={this.state.password}
                                name="password"
                                type="password"
                                validators={["password", "required"]}
                                errorMessages={[
                                    "The password must contain lowercase, uppercase number",
                                    "Password is required"
                                ]}
                                placeholder="Password"
                                onChange={this.updateField}
                            />
                            <span className="br"/>
                            <TextValidator
                                className="input"
                                label="Confirm Password"
                                margin="normal"
                                variant="outlined"
                                value={this.state.passwordpass}
                                name="passwordpass"
                                type="password"
                                validators={["isPasswordMatch", "required"]}
                                errorMessages={["password mismatch", "this field is required"]}
                                placeholder="Confirm password"
                                onChange={this.updateField}
                            />
                        </div>
                        <div className="buttons">
                            <Button className="button" type="submit">
                                Create account
                            </Button>
                            <Link to="/for-business/sign-in">Already have one?</Link>
                        </div>
                    </Paper>
                </ValidatorForm>
            </div>
        );
    }
}
export default withStyles(styles)(RegistrationForm);

