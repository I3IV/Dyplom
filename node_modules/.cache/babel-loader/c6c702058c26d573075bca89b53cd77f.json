{"ast":null,"code":"import _curry2 from './internal/_curry2';\nimport _map from './internal/_map';\nimport curryN from './curryN';\nimport max from './max';\nimport pluck from './pluck';\nimport reduce from './reduce';\n/**\r\n * Accepts a converging function and a list of branching functions and returns\r\n * a new function. When invoked, this new function is applied to some\r\n * arguments, each branching function is applied to those same arguments. The\r\n * results of each branching function are passed as arguments to the converging\r\n * function to produce the return value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.4.2\r\n * @category Function\r\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\r\n * @param {Function} after A function. `after` will be invoked with the return values of\r\n *        `fn1` and `fn2` as its arguments.\r\n * @param {Array} functions A list of functions.\r\n * @return {Function} A new function.\r\n * @see R.useWith\r\n * @example\r\n *\r\n *      var average = R.converge(R.divide, [R.sum, R.length])\r\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\r\n *\r\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\r\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\r\n *\r\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\r\n */\n\nvar converge =\n/*#__PURE__*/\n_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n\nexport default converge;","map":null,"metadata":{},"sourceType":"module"}