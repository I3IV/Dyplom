{"ast":null,"code":"import _curry3 from './internal/_curry3';\n/**\r\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\r\n * applies a function to each element of a list, passing an accumulating\r\n * parameter from right to left, and returning a final value of this\r\n * accumulator together with the new list.\r\n *\r\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\r\n * the right to the left.\r\n *\r\n * The iterator function receives two arguments, *value* and *acc*, and should\r\n * return a tuple *[value, acc]*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category List\r\n * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)\r\n * @param {Function} fn The function to be called on every element of the input `list`.\r\n * @param {*} acc The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.addIndex, R.mapAccum\r\n * @example\r\n *\r\n *      var digits = ['1', '2', '3', '4'];\r\n *      var append = (a, b) => [a + b, a + b];\r\n *\r\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\r\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\r\n *   [\r\n *     f(b, f(c, f(d, a)[0])[0])[1],\r\n *     f(c, f(d, a)[0])[1],\r\n *     f(d, a)[1],\r\n *   ]\r\n *   f(b, f(c, f(d, a)[0])[0])[0],\r\n * ]\r\n */\n\nvar mapAccumRight =\n/*#__PURE__*/\n_curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n\n  return [result, tuple[0]];\n});\n\nexport default mapAccumRight;","map":null,"metadata":{},"sourceType":"module"}