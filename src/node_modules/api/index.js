import cities from "./mock-cities";
import countries from "./mock-countries";
import cuisines from "./mock-cuisines";
import dishes from "./mock-dishes";
import dishCategories from "./mock-dish-categories";
import dishSizes from "./mock-dish-sizes";
import restaurants from "./mock-restaurants";
import seats from "./mock-seats";
import products from "./mock-products";
import addresses from "./mock-addresses";

import client from "feathers/client";
import * as R from "ramda";

const delay = ms => {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, ms);
  });
};

export const getLoggedInUser = () =>
  client
    .authenticate()
    .then(response => {
      return client.passport.verifyJWT(response.accessToken);
    })
    .then(payload => {
      return client.service("customers").get(payload.userId);
    })
    .catch(() => undefined);

export const getAllRestaurants = () =>
  client
    .service("restaurants")
    .find()
    .then(res => res.data);
export const getRestaurantsSelect = () =>
  getAllRestaurants().then(restaurants =>
    restaurants.map(r => ({ value: r.id, label: r.RestaurantName }))
  );
export const getCategoriesSelect = Restaurant_id =>
  getDishCategoriesByRestId(Restaurant_id).then(categories =>
    categories.map(c => ({ value: c.id, label: c.CategoryName }))
  );
export const getDishesSelect = Category_id =>
  getDishesByDishCategoryId(Category_id).then(dishes =>
    dishes.map(d => ({ value: d.id, label: d.DishName }))
  );
export const getAllDishes = () =>
  client
    .service("restaurant-dishes")
    .find()
    .then(res => res.data);

export const getCustomerDeliveryAddresses = () =>
  client
    .service("customer-delivery-addresses")
    .find({ query: { Cust_id: client.get("user").id } })
    .then(res =>
      Promise.all(
        res.data.map(async addr => {
          addr.address.CityName = await getCity(addr.address.City_id).then(
            City => City.CityName
          );
          return addr.address;
        })
      )
    )
    .then(addresses => addresses);

export const getCity = City_id => client.service("cities").get(City_id);

export const getDishesByRestId = Restaurant_id =>
  client
    .service("restaurant-dishes")
    .find({ query: { Restaurant_id } })
    .then(res => res.data);

export const getDish = Dish_id =>
  client.service("restaurant-dishes").findOne({ query: { Dish_id } });

export const getDishesByDishCategoryId = Category_id =>
  getAllDishes().then(res =>
    res.filter(resDish => resDish.Category_id === Category_id)
  );

export const getCategoriesByMenuId = menuId =>
  client
    .service("menu-categories")
    .find({ query: { Menu_id: menuId } })
    .then(res => res.data.menu_categories);

export const getDishCategoriesByRestId = Restaurant_id =>
  client
    .service("menu")
    .findOne({ query: { Restaurant_id } })
    .then(menu => menu.menu_categories)
    .catch(() => []);

export const getEventsNumber = () =>
    client
        .service("schedule-items")
        .find({ query: { Cust_id: client.get("user").id } })
        .then(res => res.data.length);

const getScheduleItemsByCustId = Cust_id =>
  client
    .service("schedule-items")
    .find({ query: { Cust_id } })
    .then(res => res.data);

export const getEvents = () =>
  getScheduleItemsByCustId(client.get("user").id).then(
    async scheduleItems =>
      await Promise.all(
        scheduleItems.map(async si => {
          const dishes = await Promise.all(
            si.dishes_in_schedule_items.map(
              async dishInSI =>
                await client
                  .service("dishes-in-menu")
                  .findOne({ query: { MenuDish_id: dishInSI.Dish_id } })
                  .then(dishInMenu =>
                    getDish(dishInMenu.rest_dish_size.RestaurantDish_id).then(
                      restDish => ({
                        ...restDish,
                        SelectedSize: dishInMenu.rest_dish_size.DishSize_id,
                        count: dishInSI.Ammount,
                        name: restDish.DishName,
                        price: dishInMenu.DishPrice,
                        totalPrice: dishInSI.ScheduleItemPrice
                      })
                    )
                  )
            )
          );
          const end = new Date(si.ScheduleItemDateTime);
          end.setHours(end.getHours() + 1);
          return {
            ScheduleItem_id: si.id,
            restaurant_id: si.Restaurant_id,
            title: si.restaurant.RestaurantName,
            start: new Date(si.ScheduleItemDateTime),
            end,
            TotalPrice: si.ScheduleItemTotalPrice,
            dishes
          };
        })
      )
  );

export const createEvent = event =>
  createScheduleItem({
    Cust_id: client.get("user").id,
    Restaurant_id: event.restaurant_id,
    ItemStatus_id: 1,
    Address_id: 0,
    ScheduleItemDateTime: event.start,
    ScheduleItemTotalPrice: event.TotalPrice
  }).then(si => {
    if (event.dishes) {
      event.dishes.forEach(async dish => {
        const sizeIdx = dish.dish_sizes.findIndex(size =>
          R.equals(size.id.toString(), dish.SelectedSize.toString())
        );
        const RestDishSize_id = dish.dish_sizes[sizeIdx].rest_dish_sizes.id;
        await client
          .service("dishes-in-menu")
          .findOne({ query: { RestDishSize_id } })
          .then(dish => dish.id)
          .then(dishInMenuId => {
            createDishesInScheduleItem({
              Dish_id: dishInMenuId,
              ScheduleItem_id: si.id,
              Ammount: dish.count,
              ScheduleItemPrice: dish.totalPrice
            });
          });
      });
    }
    return si;
  });

export const deleteEvent = eventId =>
  client.service("schedule-items").remove(eventId);

export const getRestaurant = id =>
  client.service("restaurants").findOne({
    query: {
      id
    }
  });
export const updateUser = user =>
  client.service("customers").patch(client.get("user").id, user);

export const createScheduleItem = scheduleItem =>
  client.service("schedule-items").create(scheduleItem);

export const createDishesInScheduleItem = dishInItem =>
  client.service("dishes-in-schedule-item").create(dishInItem);

const itemsSelect = items => {
  return items.map(item => ({
    value: item.label,
    label: item.label
  }));
};

export { dishes, restaurants };
const getItemsByParentId = (item_id, arr) => {
  const propName = Object.keys(item_id)[0];
  const itemId = item_id[propName];
  if (!itemId) return [];
  return arr.filter(item => {
    if (Array.isArray(item[propName])) {
      return item[propName].includes(itemId);
    } else return item[propName].toString() === itemId.toString();
  });
};
const getSelectItemsByParentId = (item_id, arr) =>
  getItemsByParentId(item_id, arr).map(item => ({
    value: item.id,
    label: item.name
  }));

const getItemNameById = (item_id, arr) => {
  const idx = arr.findIndex(item => item.id === item_id);
  return idx !== -1 ? arr[idx].name : "";
};
const getItemById = (item_id, arr) => {
  const idx = arr.findIndex(item => item.id.toString() === item_id.toString());
  return idx !== -1 ? arr[idx] : "";
};

export const citiesSelectItems = itemsSelect(cities);
export const countriesSelectItems = itemsSelect(countries);
export const cuisinesSelectItems = itemsSelect(cuisines);
export const seatsSelectItems = seats.map((item, index) => ({
  value: index + 1,
  label: item.label
}));
export const restaurantsSelectItems = restaurants.map(rest => ({
  value: rest.id,
  label: rest.name
}));
export const addressesSelectItems = addresses.map(addr => ({
  value: addr.id,
  label: addr.name
}));
export const dishCategoriesSelectItems = restaurant_id =>
  getSelectItemsByParentId({ restaurant_id }, dishCategories);

export const dishesSelectItems = category_id =>
  getSelectItemsByParentId({ category_id }, dishes);

export const productsSelectItems = dish_id =>
  getSelectItemsByParentId({ dish_id }, products);

export const dishSizesSelectItems = dish_id => {
  const idx = dishes.findIndex(item => item.id === dish_id);
  const sizes = dishes[idx].size_id;
  return dishSizes.filter(item => sizes.includes(item.id));
};
export const restaurantIdToName = id => getItemNameById(id, restaurants);

export const dishCategoryIdToName = id => getItemNameById(id, dishCategories);

export const dishIdToName = id => getItemNameById(id, dishes);

export const getRestaurantById = id => getItemById(id, restaurants);

export const getDishesByCategoryId = category_id =>
  getItemsByParentId({ category_id }, dishes);
