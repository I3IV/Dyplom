{"ast":null,"code":"import memoizeWith from './memoizeWith';\nimport toString from './toString';\n/**\r\n * Creates a new function that, when invoked, caches the result of calling `fn`\r\n * for a given argument set and returns the result. Subsequent calls to the\r\n * memoized `fn` with the same argument set will not result in an additional\r\n * call to `fn`; instead, the cached result for that set of arguments will be\r\n * returned.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (*... -> a) -> (*... -> a)\r\n * @param {Function} fn The function to memoize.\r\n * @return {Function} Memoized version of `fn`.\r\n * @see R.memoizeWith\r\n * @deprecated since v0.25.0\r\n * @example\r\n *\r\n *      let count = 0;\r\n *      const factorial = R.memoize(n => {\r\n *        count += 1;\r\n *        return R.product(R.range(1, n + 1));\r\n *      });\r\n *      factorial(5); //=> 120\r\n *      factorial(5); //=> 120\r\n *      factorial(5); //=> 120\r\n *      count; //=> 1\r\n */\n\nvar memoize =\n/*#__PURE__*/\nmemoizeWith(function () {\n  return toString(arguments);\n});\nexport default memoize;","map":null,"metadata":{},"sourceType":"module"}