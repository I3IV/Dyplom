import React, { Fragment, Component } from "react";
import PropTypes from "prop-types";
import { withStyles } from "@material-ui/core/styles";
import styles from "../styles";
import Typography from "@material-ui/core/Typography";
import {
  ExpansionPanel,
  ExpansionPanelDetails,
  ExpansionPanelSummary,
  TextField
} from "@material-ui/core";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import * as R from "ramda";

class Address extends Component {
  state = {
    CityName: "",
    StreetName: "",
    StreetNumber: "",
    ZipCode: ""
  };
  componentWillReceiveProps(nextProps) {
    if (
      !R.equals(this.props.address, nextProps.address) &&
      !R.isEmpty(nextProps.address)
    ) {
      this.setState(
        R.zipObj(
          ["CityName", "StreetName", "StreetNumber", "ZipCode"],
          R.compose(
            R.split(","),
            R.trim
          )(nextProps.address)
        )
      );
    }
  }

  handleChange = name => event => {
    const oldState = this.state;
    oldState[name] = event.target.value;

    this.setState({ [name]: event.target.value });

    const { CityName, StreetName, StreetNumber, ZipCode } = oldState;
    this.props.handleChange(
      `${CityName}, ${StreetName}, ${StreetNumber}, ${ZipCode}`
    );
  };
  handleExpand = name => event => {
    this.setState({ [name]: event.target.expanded });
  };
  render() {
    const { classes, address } = this.props;
    const { CityName, StreetName, StreetNumber, ZipCode } = this.state;
    const summary = R.all(R.isEmpty)([
      CityName,
      StreetName,
      StreetNumber,
      ZipCode
    ])
      ? `Enter the delivery address`
      : `${CityName}, ${StreetName}, ${StreetNumber}, ${ZipCode}`;
    return (
      <ExpansionPanel>
        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{summary}</Typography>
        </ExpansionPanelSummary>
        <ExpansionPanelDetails className={classes.details}>
          <div className={classes.column}>
            <div className={classes.row}>
              <TextField
                className="input"
                label="City"
                margin="normal"
                variant="outlined"
                type="text"
                value={CityName}
                onChange={this.handleChange("CityName")}
              />
              <TextField
                className="input"
                label="Street"
                margin="normal"
                variant="outlined"
                type="text"
                value={StreetName}
                onChange={this.handleChange("StreetName")}
              />
            </div>
            <div className={classes.row}>
              <TextField
                className="input"
                label="Building"
                margin="normal"
                variant="outlined"
                type="text"
                value={StreetNumber}
                onChange={this.handleChange("StreetNumber")}
              />
              <TextField
                className="input"
                label="Zip code"
                margin="normal"
                variant="outlined"
                type="text"
                value={ZipCode}
                onChange={this.handleChange("ZipCode")}
              />
            </div>
          </div>
        </ExpansionPanelDetails>
      </ExpansionPanel>
    );
  }
}

Address.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(Address);
