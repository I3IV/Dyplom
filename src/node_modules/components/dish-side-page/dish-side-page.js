import React from "react";
import PropTypes from "prop-types";
import { withStyles, MuiThemeProvider } from "@material-ui/core/styles";
import Divider from "@material-ui/core/Divider";
import AddIcon from "@material-ui/icons/Add";
import RemoveIcon from "@material-ui/icons/Remove";
import RadioSelect from "components/radio-select";
import ProductsList from "components/schedule-item-products-list";
import TextField from "@material-ui/core/TextField";
import Typography from "@material-ui/core/Typography";
import IconButton from "@material-ui/core/IconButton";
import Button from "@material-ui/core/Button";
import { productsSelectItems, dishSizesSelectItems } from "api";
import styles from "./styles";
import theme, { defaultTheme } from "./themes";

const formatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2
});
class DishSidePage extends React.Component {
  state = {
    size_id: 0,
    sizes: [],
    products: [],
    count: 1
  };
  toggleProperty(arr, id, propName) {
    const idx = arr.findIndex(el => el.value === id);
    const oldItem = arr[idx];
    const newItem = { ...oldItem, [propName]: !oldItem[propName] };

    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }
  onDishSizeChange = size_id => {
    this.setState({
      size_id
    });
  };
  onProductChange = product_id => {
    const { products } = this.state;
    const changedProducts = this.toggleProperty(
      products,
      product_id,
      "checked"
    );
    this.setState({
      products: changedProducts
    });
  };
  handleChange = name => event => {
    this.setState({
      [name]: event.target.value
    });
  };
  onDishUp = () => {
    this.setState({
      count: this.state.count + 1
    });
  };
  onDishDown = () => {
    if (this.state.count - 1 >= 1) {
      this.setState({
        count: this.state.count - 1
      });
    }
  };
  componentWillReceiveProps(nextProps) {
    if (nextProps.dishToShow.id !== this.state.id) {
      const dish_id = nextProps.dishToShow.id;
      this.setState({
        ...nextProps.dishToShow,
        size_id: dishSizesSelectItems(dish_id)[0].id,
        sizes: dishSizesSelectItems(dish_id),
        products: productsSelectItems(dish_id).map(product => ({
          ...product,
          checked: true
        }))
      });
    }
  }

  render() {
    const { classes, dishToShow } = this.props;
    const { count, sizes, size_id, products } = this.state;
    const { id, name, description, price } = dishToShow;
    return (
      <div className={classes.list}>
        <MuiThemeProvider theme={theme}>
          <div className={classes.content}>
            <img
              src={`/images/dishes/${id}.jpg`}
              alt={name}
              className={classes.dishImg}
            />

            <div className={classes.topDesc}>
              <Typography variant="h6" color="primary" gutterBottom>
                {name}
              </Typography>
              <Typography variant="body2" color="secondary" gutterBottom>
                {description}
              </Typography>
            </div>
            <Divider />
            <MuiThemeProvider theme={defaultTheme}>
              <Typography
                className={classes.text}
                variant="h6"
                color="textSecondary"
              >
                Select size
              </Typography>
              {size_id && (
                <RadioSelect
                  items={sizes}
                  selected={size_id}
                  onChange={this.onDishSizeChange}
                />
              )}
              <Divider />
              <Typography
                className={classes.text}
                variant="h6"
                color="textSecondary"
              >
                Select products
              </Typography>
              {products && (
                <ProductsList
                  items={products}
                  onProductChange={this.onProductChange}
                />
              )}
              <Divider />
              <Typography
                className={classes.text}
                variant="h6"
                color="textSecondary"
              >
                Comment
              </Typography>
            </MuiThemeProvider>
            <TextField
              id="filled-textarea"
              placeholder="Enter your comment"
              multiline
              rows="4"
              className={classes.textField}
              margin="normal"
              variant="filled"
            />
            <Divider />
          </div>
          <div className={classes.bottomPanel}>
            <div className={classes.flexRow}>
              <div className={`${classes.flexRow} ${classes.flexPrice}`}>
                <IconButton
                  className={classes.iconButton}
                  aria-label="Remove"
                  onClick={this.onDishDown}
                >
                  <RemoveIcon fontSize="small" />
                </IconButton>
                <span>{count}</span>
                <IconButton
                  className={classes.iconButton}
                  aria-label="Add"
                  onClick={this.onDishUp}
                >
                  <AddIcon fontSize="small" />
                </IconButton>
              </div>
              <Typography
                className={classes.price}
                variant="h6"
                color="textPrimary"
                align="center"
              >
                {formatter.format(count * price)}
              </Typography>
            </div>
            <MuiThemeProvider theme={defaultTheme}>
              <Button
                onClick={this.props.handleApply}
                color="secondary"
                variant="outlined"
                className={classes.button}
              >
                Add to cart
              </Button>
            </MuiThemeProvider>
          </div>
        </MuiThemeProvider>
      </div>
    );
  }
}

DishSidePage.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(DishSidePage);
