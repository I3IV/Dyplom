import React from "react";
import PropTypes from "prop-types";
import { withStyles } from "@material-ui/core/styles";
import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemSecondaryAction from "@material-ui/core/ListItemSecondaryAction";
import ListItemText from "@material-ui/core/ListItemText";
import ListSubheader from "@material-ui/core/ListSubheader";
import Checkbox from "@material-ui/core/Checkbox";
import * as R from "ramda";
import { productsStore } from "store";

const styles = theme => ({
  root: {
    width: "100%",
    maxWidth: 360,
    backgroundColor: theme.palette.background.paper,
    position: "relative",
    overflow: "auto",
    maxHeight: 300
  },
  listSection: {
    backgroundColor: "inherit"
  },
  ul: {
    backgroundColor: "inherit",
    padding: 0
  },
  subheader: {
    backgroundColor: "#f5f5f5"
  }
});

class ProductsList extends React.Component {
  state = {
    checked: [],
    categories: productsStore.prodcutCategories
  };
  getCheckedItems = items => items.filter(item => item.checked);

  shouldComponentUpdate(nextProps, nextState) {
    return (
      !R.equals(nextProps.checked, this.props.checked) ||
      R.isEmpty(nextProps.checked)
    ); // equals() is your implementation
  }

  render() {
    const { categories } = this.state;
    const { classes, maxHeight, maxWidth, checked } = this.props;
    const maxH = maxHeight ? maxHeight : classes.root.maxHeight;
    const maxW = maxWidth ? maxWidth : classes.root.maxWidth;
    return (
      <div className={classes.list}>
        <List
          className={classes.root}
          style={{ maxHeight: maxH, maxWidth: maxW }}
          subheader={<li />}
        >
          {categories.map(({ id, CategoryName, products }) => (
            <li key={id} className={classes.listSection}>
              <ul className={classes.ul}>
                <ListSubheader className={classes.subheader}>
                  {CategoryName}
                </ListSubheader>
                {products.map(p => (
                  <ListItem key={p.id}>
                    <ListItemText primary={p.ProductName} />
                    <ListItemSecondaryAction>
                      <Checkbox
                        onChange={() => this.props.toggleProduct(p)}
                        checked={checked.indexOf(p.id) !== -1}
                      />
                    </ListItemSecondaryAction>
                  </ListItem>
                ))}
              </ul>
            </li>
          ))}
        </List>
      </div>
    );
  }
}

ProductsList.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(ProductsList);
