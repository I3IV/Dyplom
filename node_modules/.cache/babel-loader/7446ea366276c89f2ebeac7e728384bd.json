{"ast":null,"code":"import _aperture from './internal/_aperture';\nimport _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xaperture from './internal/_xaperture';\n/**\r\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\r\n * greater than the length of the list, an empty list is returned.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a]]\r\n * @param {Number} n The size of the tuples to create\r\n * @param {Array} list The list to split into `n`-length tuples\r\n * @return {Array} The resulting list of `n`-length tuples\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\r\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\r\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\r\n */\n\nvar aperture =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable([], _xaperture, _aperture));\n\nexport default aperture;","map":null,"metadata":{},"sourceType":"module"}