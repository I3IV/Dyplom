import client from "feathers/client";
import { DELIVER_TO_ADDRESS } from "shared-components/constants";
import * as R from "ramda";
import { authStore, citiesStore } from "store";
import { createAddress, createDeliveryAddresses } from "api";

export const createNewOrder = orderInCart => {
  if (orderInCart.Restaurant_id) createOrderInRestaurant(orderInCart);
  else createMultiplyOrder(orderInCart);
};

const createMultiplyOrder = async orderInCart => {
  const sorted = R.sortBy(R.prop("Restaurant_id"))(orderInCart.dishes);
  let restId;
  let orderDishes;
  let curLength = 0;
  if (!orderInCart.address_id)
    await addNewAddress(
      orderInCart.address,
      orderInCart.addAddressChecked
    ).then(addr_id => R.assoc('address_id', addr_id, orderInCart));
  while (curLength < sorted.length) {
    restId = sorted[curLength].Restaurant_id;
    orderDishes = R.takeWhile(
      R.propEq("Restaurant_id", restId),
      R.takeLast(sorted.length - curLength, sorted)
    );
    createOrderInRestaurant({
      ...orderInCart,
      dishes: orderDishes,
      Restaurant_id: restId
    });

    curLength += orderDishes.length;
  }
};

const createOrderInRestaurant = orderInCart => {
  const newOrder = {
    OrderStatus_id: 1,
    Restaurant_id: orderInCart.Restaurant_id,
    Cust_id: authStore.isAuthenticated ? authStore.user.id : 0,
    PaymentType_id: 1,
    Preferences: orderInCart.comment,
    OrderDateTime: orderInCart.orderDateTime,
    OrderTotalPrice: orderInCart.totalPrice
  };

  createOrder(newOrder).then(newOrder => {
    orderInCart.dishes.forEach(async dish => {
      await createOrderDish({
        Order_id: newOrder.id,
        Dish_id: dish.id,
        Ammount: dish.count,
        OrderDishPrice: dish.price
      }).then(newDish => {
        dish.addlProducts.forEach(async product => {
          await createAddlProductForOrder({
            Product_id: product.id,
            OrderDish_id: newDish.id
          });
        });
      });
    });
    //Creating food delivery
    if (orderInCart.location === DELIVER_TO_ADDRESS) {
      const delivery = {
        Cust_id: authStore.isAuthenticated ? authStore.user.id : 0,
        Order_id: newOrder.id,
        Phone: orderInCart.phone ? orderInCart.phone : null,
        FoodDeliveryDateTime: orderInCart.orderDateTime,
        Comment: orderInCart.comment
      };
      if (R.isNil(orderInCart.address_id) || orderInCart.address_id === 0) {
        addNewAddress(orderInCart.address, orderInCart.addAddressChecked).then(
          addr_id => {
            createFoodDelivery(R.assoc("Address_id", addr_id, delivery));
          }
        );
      } else
        createFoodDelivery(
          R.assoc("Address_id", orderInCart.address_id, delivery)
        );
    }
  });
};

const addNewAddress = (addr, addToCustAddr) => {
  const address = R.assoc("City_id", citiesStore.selectedCityId, addr);
  const createAddressF = addToCustAddr
    ? createDeliveryAddresses
    : createAddress;
  return createAddressF(address).then(
    a => (addToCustAddr ? a.Address_id : a.id)
  );
};

export const createOrder = order => client.service("orders").create(order);

export const createOrderDish = orderDish =>
  client.service("order-dishes").create(orderDish);

export const createAddlProductForOrder = addlProducts =>
  client.service("additional-products-for-order").create(addlProducts);

export const createFoodDelivery = delivery =>
  client.service("food-delivery").create(delivery);
