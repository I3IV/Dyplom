import React, { Fragment } from "react";
import PropTypes from "prop-types";
import { withStyles, MuiThemeProvider } from "@material-ui/core/styles";
import Divider from "@material-ui/core/Divider";
import AddIcon from "@material-ui/icons/Add";
import RemoveIcon from "@material-ui/icons/Remove";
import RadioSelect from "shared-components/radio-select";
import ProductsList from "shared-components/products-list";
import AdditionalProductsList from "shared-components/additional-products-list";
import TextField from "@material-ui/core/TextField";
import Typography from "@material-ui/core/Typography";
import IconButton from "@material-ui/core/IconButton";
import Button from "@material-ui/core/Button";
import { addDishToCart } from "api";
import styles from "./styles";
import theme, { defaultTheme } from "./themes";
import { DISH_PHOTOS_URL } from "shared-components/constants";
import * as R from "ramda";
const formatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2
});
class DishSidePage extends React.Component {
  state = {
    addlProducts: [],
    count: 1
  };
  handleApply = () => {
    const { dish, count, sizes, size_id, addlProducts } = this.state;
    addDishToCart({
      ...dish,
      name: dish.Name,
      count,
      sizes,
      size_id,
      products: addlProducts,
      RestaurantDish_id: dish.id
    });
    this.props.handleApply();
  };

  onDishSizeChange = size_id => {
    this.setState({
      size_id
    });
  };

  deleteProduct = product => {
    const addlProducts = R.reject(
      R.eqProps("id", product),
      this.state.addlProducts
    );
    this.setState({ addlProducts });
  };
  toggleProduct = product => {
    const oldAddl = this.state.addlProducts;
    const p = R.find(R.eqProps("id", product), oldAddl);
    const addlProducts = p
      ? R.reject(R.eqProps("id", product), oldAddl)
      : R.append(product, oldAddl);
    this.setState({ addlProducts });
  };
  handleChange = name => event => {
    this.setState({
      [name]: event.target.value
    });
  };
  onDishUp = () => {
    this.setState({
      count: this.state.count + 1
    });
  };
  onDishDown = () => {
    if (this.state.count - 1 >= 1) {
      this.setState({
        count: this.state.count - 1
      });
    }
  };
  transformDishSizes = _sizes => {
    return _sizes.map(size => ({
      id: size.id,
      name: size.DishSizeName,
      price: size.price,
      DishInMenuId: size.DishInMenuId
    }));
  };

  componentWillReceiveProps(nextProps) {
    if (nextProps.dishToShow.id !== this.state.id) {
      const { Sizes } = nextProps.dishToShow;
      this.setState({
        dish: nextProps.dishToShow,
        size_id: Sizes[0].id,
        sizes: this.transformDishSizes(Sizes)
      });
    }
  }

  render() {
    const { classes } = this.props;
    const { count, sizes, size_id, addlProducts, dish } = this.state;
    if (!dish) return "";
    const { Name, Description } = dish;
    const checked = R.map(R.prop("id"), addlProducts);
    const products = R.map(
      R.compose(
        p => " " + p,
        R.toLower,
        R.prop("ProductName")
      ),
      dish.products
    );

    const Price = sizes.find(size => size.id == size_id).price;
    return (
      <div className={classes.list}>
        <MuiThemeProvider theme={theme}>
          <div className={classes.content}>
            <img
              src={`${DISH_PHOTOS_URL + dish.defaultPhoto}`}
              alt={Name}
              className={classes.dishImg}
            />

            <div className={classes.topDesc}>
              <Typography variant="h6" color="primary" gutterBottom>
                {Name}
              </Typography>
              <Typography variant="body2" color="secondary" gutterBottom>
                {`${Description} ${
                  R.isEmpty(products) ? "" : "(" + products + " )"
                }`}
              </Typography>
            </div>
            <Divider />
            <MuiThemeProvider theme={defaultTheme}>
              <Typography
                className={classes.text}
                variant="h6"
                color="textSecondary"
              >
                Select size
              </Typography>
              {size_id && (
                <RadioSelect
                  items={sizes}
                  selected={size_id}
                  onChange={this.onDishSizeChange}
                />
              )}
              <Divider />
              {!R.isEmpty(addlProducts) && (
                <Fragment>
                  <Typography
                    className={classes.text}
                    variant="h6"
                    color="textSecondary"
                  >
                    Add-ons
                  </Typography>
                  <AdditionalProductsList
                    items={this.state.addlProducts}
                    onDelete={this.deleteProduct}
                  />
                  <Divider />
                </Fragment>
              )}
              <Typography
                className={classes.text}
                variant="h6"
                color="textSecondary"
              >
                Select products
              </Typography>
              <ProductsList
                toggleProduct={this.toggleProduct}
                checked={checked}
              />
              <Divider />
              <Typography
                className={classes.text}
                variant="h6"
                color="textSecondary"
              >
                Comment
              </Typography>
            </MuiThemeProvider>
            <TextField
              id="filled-textarea"
              placeholder="Enter your comment"
              multiline
              rows="4"
              className={classes.textField}
              margin="normal"
              variant="filled"
            />
            <Divider />
          </div>
          <div className={classes.bottomPanel}>
            <div className={classes.flexRow}>
              <div className={`${classes.flexRow} ${classes.flexPrice}`}>
                <IconButton
                  className={classes.iconButton}
                  aria-label="Remove"
                  onClick={this.onDishDown}
                >
                  <RemoveIcon fontSize="small" />
                </IconButton>
                <span>{count}</span>
                <IconButton
                  className={classes.iconButton}
                  aria-label="Add"
                  onClick={this.onDishUp}
                >
                  <AddIcon fontSize="small" />
                </IconButton>
              </div>
              <Typography
                className={classes.price}
                variant="h6"
                color="textPrimary"
                align="center"
              >
                {formatter.format(count * Price)}
              </Typography>
            </div>
            <MuiThemeProvider theme={defaultTheme}>
              <Button
                onClick={this.handleApply}
                color="secondary"
                variant="outlined"
                className={classes.button}
              >
                Add to cart
              </Button>
            </MuiThemeProvider>
          </div>
        </MuiThemeProvider>
      </div>
    );
  }
}

DishSidePage.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(DishSidePage);
