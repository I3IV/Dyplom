{"ast":null,"code":"import _regeneratorRuntime from \"H:\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"H:\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport client from \"feathers/client\";\nexport var getCustomerDeliveryAddresses = function getCustomerDeliveryAddresses() {\n  return client.service(\"customer-delivery-addresses\").find({\n    query: {\n      Cust_id: client.get(\"user\").id\n    }\n  }).then(function (res) {\n    return Promise.all(res.data.map(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(addr) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addr.address.id = addr.id;\n                _context.next = 3;\n                return getCity(addr.address.City_id).then(function (City) {\n                  return City.CityName;\n                });\n\n              case 3:\n                addr.address.CityName = _context.sent;\n                return _context.abrupt(\"return\", addr.address);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n  }).then(function (addresses) {\n    return addresses;\n  });\n};\nexport var createDeliveryAddresses = function createDeliveryAddresses(address) {\n  return client.service(\"addresses\").create(address).then(function (Address_id) {\n    client.service(\"customer-delivery-addresses\").create({\n      Cust_id: client.get(\"user\").id,\n      Address_id: Address_id\n    });\n  });\n};\nexport var getCity = function getCity(City_id) {\n  return client.service(\"cities\").get(City_id);\n};\nexport var getAllCities = function getAllCities() {\n  return client.service(\"cities\").find();\n};\nexport var getCitiesByCountryId = function getCitiesByCountryId(Country_id) {\n  return client.service(\"cities\").find({\n    query: {\n      Country_id: Country_id\n    }\n  });\n};\nexport var getAllCountries = function getAllCountries() {\n  return client.service(\"countries\").find();\n};","map":{"version":3,"sources":["H:\\I3IV\\Dyplom\\src\\node_modules\\api\\addresses.js"],"names":["client","getCustomerDeliveryAddresses","service","find","query","Cust_id","get","id","then","res","Promise","all","data","map","addr","address","getCity","City_id","City","CityName","addresses","createDeliveryAddresses","create","Address_id","getAllCities","getCitiesByCountryId","Country_id","getAllCountries"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B;AAAA,SACxCD,MAAM,CACDE,OADL,CACa,6BADb,EAEKC,IAFL,CAEU;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEL,MAAM,CAACM,GAAP,CAAW,MAAX,EAAmBC;AAA9B;AAAT,GAFV,EAGKC,IAHL,CAGU,UAAAC,GAAG;AAAA,WACLC,OAAO,CAACC,GAAR,CACIF,GAAG,CAACG,IAAJ,CAASC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAa,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AACTA,gBAAAA,IAAI,CAACC,OAAL,CAAaR,EAAb,GAAkBO,IAAI,CAACP,EAAvB;AADS;AAAA,uBAEqBS,OAAO,CAACF,IAAI,CAACC,OAAL,CAAaE,OAAd,CAAP,CAA8BT,IAA9B,CAC1B,UAAAU,IAAI;AAAA,yBAAIA,IAAI,CAACC,QAAT;AAAA,iBADsB,CAFrB;;AAAA;AAETL,gBAAAA,IAAI,CAACC,OAAL,CAAaI,QAFJ;AAAA,iDAKFL,IAAI,CAACC,OALH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAb;;AAAA;AAAA;AAAA;AAAA,QADJ,CADK;AAAA,GAHb,EAcKP,IAdL,CAcU,UAAAY,SAAS;AAAA,WAAIA,SAAJ;AAAA,GAdnB,CADwC;AAAA,CAArC;AAgBP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAN,OAAO;AAAA,SAC1Cf,MAAM,CACDE,OADL,CACa,WADb,EAEKoB,MAFL,CAEYP,OAFZ,EAGKP,IAHL,CAGU,UAAAe,UAAU,EAAI;AAChBvB,IAAAA,MAAM,CACDE,OADL,CACa,6BADb,EAEKoB,MAFL,CAEY;AAAEjB,MAAAA,OAAO,EAAEL,MAAM,CAACM,GAAP,CAAW,MAAX,EAAmBC,EAA9B;AAAkCgB,MAAAA,UAAU,EAAVA;AAAlC,KAFZ;AAGH,GAPL,CAD0C;AAAA,CAAvC;AAUP,OAAO,IAAMP,OAAO,GAAG,SAAVA,OAAU,CAAAC,OAAO;AAAA,SAAIjB,MAAM,CAACE,OAAP,CAAe,QAAf,EAAyBI,GAAzB,CAA6BW,OAA7B,CAAJ;AAAA,CAAvB;AACP,OAAO,IAAMO,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAMxB,MAAM,CAACE,OAAP,CAAe,QAAf,EAAyBC,IAAzB,EAAN;AAAA,CAArB;AACP,OAAO,IAAMsB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,UAAU;AAAA,SAC1C1B,MAAM,CAACE,OAAP,CAAe,QAAf,EAAyBC,IAAzB,CAA8B;AAAEC,IAAAA,KAAK,EAAE;AAAEsB,MAAAA,UAAU,EAAVA;AAAF;AAAT,GAA9B,CAD0C;AAAA,CAAvC;AAGP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAM3B,MAAM,CAACE,OAAP,CAAe,WAAf,EAA4BC,IAA5B,EAAN;AAAA,CAAxB","sourcesContent":["import client from \"feathers/client\";\r\n\r\nexport const getCustomerDeliveryAddresses = () =>\r\n    client\r\n        .service(\"customer-delivery-addresses\")\r\n        .find({ query: { Cust_id: client.get(\"user\").id } })\r\n        .then(res =>\r\n            Promise.all(\r\n                res.data.map(async addr => {\r\n                    addr.address.id = addr.id;\r\n                    addr.address.CityName = await getCity(addr.address.City_id).then(\r\n                        City => City.CityName\r\n                    );\r\n                    return addr.address;\r\n                })\r\n            )\r\n        )\r\n        .then(addresses => addresses);\r\nexport const createDeliveryAddresses = address =>\r\n    client\r\n        .service(\"addresses\")\r\n        .create(address)\r\n        .then(Address_id => {\r\n            client\r\n                .service(\"customer-delivery-addresses\")\r\n                .create({ Cust_id: client.get(\"user\").id, Address_id });\r\n        });\r\n\r\nexport const getCity = City_id => client.service(\"cities\").get(City_id);\r\nexport const getAllCities = () => client.service(\"cities\").find();\r\nexport const getCitiesByCountryId = Country_id =>\r\n    client.service(\"cities\").find({ query: { Country_id } });\r\n\r\nexport const getAllCountries = () => client.service(\"countries\").find();"]},"metadata":{},"sourceType":"module"}