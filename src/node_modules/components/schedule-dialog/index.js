import React from "react";
import Button from "@material-ui/core/Button";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogTitle from "@material-ui/core/DialogTitle";
import DialogContent from "@material-ui/core/DialogContent";
import SelectControl from "components/select-control";
import DishesList from "components/schedule-item-dishes-list";
import ProductsList from "components/schedule-item-products-list";
import RadioSelect from 'components/radio-select';
import DeleteIcon from "@material-ui/icons/Delete";
import "./schedule-dialog.css";
import {
  restaurantsSelectItems,
  dishCategoriesSelectItems,
  dishesSelectItems,
  productsSelectItems,
  dishSizesSelectItems,
  addressesSelectItems,
  restaurantIdToName,
  seatsSelectItems,
  dishIdToName
} from "api";
export default class ScheduleDialog extends React.Component {
  state = {
    open: false,
    event: { dishes: [] },
    editMode: false
  };
  deliveryLocations = [
    {id:1, name:'In restaurant'},
    {id:2, name:'Deliver to address'},
  ];

  componentWillReceiveProps(nextProps) {
    if (nextProps.dialogOpen !== this.state.open) {
      this.setState({
        open: nextProps.dialogOpen,
        event: nextProps.event,
        editMode: false
      });
    }
  }

  comparePropeties(oldObj, newObj, properties) {
    const idx = properties.findIndex(propName => {
      return oldObj[propName] !== newObj[propName];
    });
    return idx === -1 ? true : false;
  }
  compareDishes(oldDish, newDish) {
    if (
      this.comparePropeties(oldDish, newDish, ["size_id"]) &&
      this.comparePropeties(oldDish.products, newDish.products, ["checked"])
    ) {
      return true;
    } else {
      return false;
    }
  }

  upDownProperty(arr, id, propName, upDown) {
    const idx = arr.findIndex(el => el.id === id);
    if (idx === -1) return;

    const oldItem = arr[idx];

    const newItem = {
      ...oldItem,
      [propName]: upDown ? ++oldItem[propName] : --oldItem[propName]
    };
    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }
  toggleProperty(arr, id, propName) {
    const idx = arr.findIndex(el => el.value === id);
    const oldItem = arr[idx];
    const newItem = { ...oldItem, [propName]: !oldItem[propName] };

    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }
  updateItem(arr, id, item, props) {
    const idx = arr.findIndex(el => el.id === id);
    console.log("PROPS", props);
    const newItem = props ? { ...arr[idx], ...props } : item;
    console.log("NEW ITEM", newItem);
    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];
  }

  increaseProperty = (arr, id, propName) =>
    this.upDownProperty(arr, id, propName, true);
  decreseProperty = (arr, id, propName) =>
    this.upDownProperty(arr, id, propName, false);

  onRestaurantChange = ({ value }) => {
    this.setState({
      event: {
        ...this.state.event,
        title: restaurantIdToName(value),
        restaurant_id: value,
        category_id: 0,
        selectedDish: undefined
      }
    });
  };
  onDishCategoryChange = ({ value }) => {
    this.setState({
      event: {
        ...this.state.event,
        category_id: value,
        selectedDish: undefined
      }
    });
  };
  onDishChange = ({ value }) => {
    const newSelectedDish = value
      ? {
          id: value,
          products: productsSelectItems(value).map(product => ({
            ...product,
            checked: true
          })),
          sizes: dishSizesSelectItems(value),
          size_id: dishSizesSelectItems(value)[0].id
        }
      : undefined;
    this.setState({
      event: { ...this.state.event, selectedDish: newSelectedDish }
    });
  };
  onProductChange = product_id => {
    const { products } = this.state.event.selectedDish;
    const changedProducts = this.toggleProperty(
      products,
      product_id,
      "checked"
    );
    this.setState({
      event: {
        ...this.state.event,
        selectedDish: {
          ...this.state.event.selectedDish,
          products: changedProducts
        }
      }
    });
  };
  onDishSizeChange = size_id => {
    this.setState({
      event: {
        ...this.state.event,
        selectedDish: { ...this.state.event.selectedDish, size_id }
      }
    });
  };

  onDishAdd = () => {
    const { id, products, size_id, sizes } = this.state.event.selectedDish;

    if (id) {
      const dishes = this.state.event.dishes;
      const changedDishes = this.increaseProperty(dishes, id, "count");

      if (changedDishes) {
        this.setState({
          event: { ...this.state.event, dishes: changedDishes }
        });
      } else {
        const newDish = {
          id,
          name: dishIdToName(id),
          products: products,
          sizes,
          size_id,
          count: 1
        };
        this.setState({
          event: {
            ...this.state.event,
            dishes: [...this.state.event.dishes, newDish]
          }
        });
      }
    }
  };
  onDishUp = dish_id => {
    const dishes = this.state.event.dishes;
    const changedDishes = this.increaseProperty(dishes, dish_id, "count");

    this.setState({
      event: { ...this.state.event, dishes: changedDishes }
    });
  };
  onDishDown = dish_id => {
    const dishes = this.state.event.dishes;
    const dish = dishes.find(dish => dish.id === dish_id);
    if (dish.count === 1) this.onDishDelete(dish_id);
    else {
      const changedDishes = this.decreseProperty(dishes, dish_id, "count");

      this.setState({
        event: { ...this.state.event, dishes: changedDishes }
      });
    }
  };
  onDishDelete = dish_id => {
    const dishes = this.state.event.dishes;
    const idx = dishes.findIndex(dish => dish.id === dish_id);
    const changedDishes = [...dishes.slice(0, idx), ...dishes.slice(idx + 1)];
    this.setState({
      event: { ...this.state.event, dishes: changedDishes }
    });
  };
  onDishClick = dish_id => {
    const dishes = this.state.event.dishes;
    const idx = dishes.findIndex(dish => dish.id === dish_id);
    this.setState({
      event: { ...this.state.event, selectedDish: dishes[idx] },
      editMode: true
    });
  };
  onDishEditSave = () => {
    const { selectedDish, dishes } = this.state.event;
    const { id, products, size_id } = selectedDish;
    const changedDishes = this.updateItem(dishes, id, selectedDish, {
      products,
      size_id
    });
    this.setState({
      event: {
        ...this.state.event,
        dishes: changedDishes,
        selectedDish: undefined
      },
      editMode: false
    });
  };
  onDishEditCancel = () => {
    this.setState({
      event: { ...this.state.event, selectedDish: undefined },
      editMode: false
    });
  };
  onLocationChange = (location_id) => {
    this.setState({
      event: { ...this.state.event, location_id: location_id },
    });
  }
  onAddressChange = ({value}) => {
    this.setState({
      event: { ...this.state.event, address_id: value },
    });
  }
  onSeatsChange = ({value}) => {
    this.setState({
      event: { ...this.state.event, seats: value },
    });
  }

  handleClickOpen = () => {
    this.setState({ open: true });
  };
  handleClose = () => {
    this.setState({ open: false });
  };
  handleApply = () => {
    this.props.handleApply(this.state.event);
    this.setState({ open: false });
  };
  handleDelete = () => {
    this.props.handleDelete(this.state.event);
    this.setState({ open: false });
  };
  getComponentToShow = (show, ComponentToShow) =>
    show ? () => ComponentToShow : () => <span />;

  render() {
    console.log("rendering... State=", this.state);
    const { editMode, event } = this.state;
    const {
      restaurant_id,
      category_id,
      selectedDish,
      start,
      dishes,
      location_id,
      address_id,
      seats
    } = event;
    const location = location_id ? location_id : "1";
    const SelectRestaurant = this.getComponentToShow(
      !editMode,
      <SelectControl
        onSelectChange={this.onRestaurantChange}
        name="title"
        value={restaurant_id}
        items={restaurantsSelectItems}
        emptyValue="Select restaurant"
      />
    );
    const SelectCategory = this.getComponentToShow(
      !editMode,
      <SelectControl
        onSelectChange={this.onDishCategoryChange}
        name="category"
        value={category_id}
        items={dishCategoriesSelectItems(restaurant_id)}
        emptyValue="Select category"
      />
    );
    const SelectDish = this.getComponentToShow(
      !editMode,
      <SelectControl
        onSelectChange={this.onDishChange}
        name="dish"
        value={selectedDish ? selectedDish.id : 0}
        items={dishesSelectItems(category_id)}
        emptyValue="Select dish"
      />
    );
    const SelectLocation = this.getComponentToShow(
      dishes.length > 0 && !editMode,
      <RadioSelect
        items={this.deliveryLocations}
        selected={location_id}
        onChange={this.onLocationChange}
      />
    )
    const SelectSeats = this.getComponentToShow(
     location === "1" && !editMode && dishes.length > 0,
     <SelectControl onSelectChange={this.onSeatsChange}
                    name = 'seats'
                    items = {seatsSelectItems}
                    value = {seats}
                    emptyValue = 'Select seats number'/>
    )
    const SelectAddress = this.getComponentToShow(
       location === "2" && !editMode && dishes.length > 0,
      <SelectControl
            onSelectChange={this.onAddressChange}
            name="title"
            value={address_id}
            items={addressesSelectItems}
            emptyValue="Select address"
       />
   );

    const DishProducts = selectedDish
      ? () => (
          <ProductsList
            items={selectedDish.products}
            onProductChange={this.onProductChange}
          />
        )
      : () => <span />;
    const DishSizes = selectedDish
      ? () => (
          <RadioSelect
            items={selectedDish.sizes}
            selected={selectedDish.size_id}
            onChange={this.onDishSizeChange}
          />
        )
      : () => <span />;
    const ButtonAdd = this.getComponentToShow(
      !editMode,
      <Button
        onClick={this.onDishAdd}
        disabled={!(restaurant_id && category_id && selectedDish)}
        color="secondary"
      >
        Add
      </Button>
    );
    const ButtonEditSave = this.getComponentToShow(
      editMode,
      <Button onClick={this.onDishEditSave} color="secondary">
        Save
      </Button>
    );
    const ButtonEditCancel = this.getComponentToShow(
      editMode,
      <Button onClick={this.onDishEditCancel} color="primary">
        Cancel
      </Button>
    );
    return (
      <div>
        <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          aria-labelledby="form-dialog-title"
        >
          <DialogTitle id="form-dialog-title">
            {start
              ? start.toLocaleString()
              : `Schedule Item`}
          </DialogTitle>
          <DialogContent className="schedule-item">
            <div className="selects">
              <SelectRestaurant />
              <SelectCategory />
              <SelectDish />

              <DishProducts />
              <DishSizes />
              <ButtonAdd />
              <div className="row-elements">
                <ButtonEditCancel />
                <ButtonEditSave />
              </div>
            </div>
            <div className="column-elements">
              <DishesList
                items={dishes}
                onDishUp={this.onDishUp}
                onDishDown={this.onDishDown}
                onDishDelete={this.onDishDelete}
                onDishClick={this.onDishClick}
              />
              <SelectLocation />
              <SelectAddress />
              <SelectSeats />
            </div>
          </DialogContent>

          <DialogActions>
            <Button onClick={this.handleDelete} color="secondary">
              <DeleteIcon />
            </Button>
            <Button onClick={this.handleClose} color="primary">
              Close
            </Button>
            <Button onClick={this.handleApply} color="primary">
              Apply changes
            </Button>
          </DialogActions>
        </Dialog>
      </div>
    );
  }
}
