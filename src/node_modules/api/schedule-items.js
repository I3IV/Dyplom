import client from "feathers/client";
import {
  getDish,
  createAddlProductForSI,
  getProduct,
  getProductsByDishInSI
} from "api";
import * as R from "ramda";
import { calendarStore} from "store";

export const getEventsNumber = () =>
  client
    .service("schedule-items")
    .find({ query: { Cust_id: client.get("user").id } })
    .then(res => res.data.length);

export const getEvents = () =>
  getScheduleItemsByCustId(client.get("user").id).then(
    async scheduleItems =>
      await Promise.all(
        scheduleItems.map(async si => {
          const dishes = await Promise.all(
            si.dishes_in_schedule_items.map(
              async dishInSI =>
                await client
                  .service("dishes-in-menu")
                  .findOne({ query: { MenuDish_id: dishInSI.Dish_id } })
                  .then(dishInMenu =>
                    getDish(dishInMenu.rest_dish_size.RestaurantDish_id).then(
                      async restDish => {
                        const addlProducts = await getProductsByDishInSI(
                          dishInSI.id
                        ).then(pcs => R.map(R.prop("product"), pcs));
                        console.log("addlProducts", addlProducts)
                        return {
                          ...restDish,
                          SelectedSize: dishInMenu.rest_dish_size.DishSize_id,
                          count: dishInSI.Ammount,
                          name: restDish.DishName,
                          price: dishInMenu.DishPrice,
                          addlProducts,
                          totalPrice: dishInSI.ScheduleItemPrice
                        };
                      }
                    )
                  )
            )
          );
          const end = new Date(si.ScheduleItemDateTime);
          end.setMinutes(end.getMinutes() + 30);
          const event = {
            ScheduleItem_id: si.id,
            restaurant_id: si.Restaurant_id,
            title: si.restaurant.RestaurantName,
            start: new Date(si.ScheduleItemDateTime),
            end,
            TotalPrice: si.ScheduleItemTotalPrice,
            dishes
          };
          if (si.Address_id) event.address_id = si.Address_id;
          return event;
        })
      )
  );

export const createEvent = event =>
  createScheduleItem({
    Cust_id: client.get("user").id,
    Restaurant_id: event.restaurant_id,
    ItemStatus_id: 1,
    Address_id: event.address_id ? event.address_id : 0,
    ScheduleItemDateTime: event.start,
    ScheduleItemTotalPrice: event.TotalPrice
  }).then(si => {
    if (event.dishes) {
      event.dishes.forEach(async dish => {
        const sizeIdx = dish.dish_sizes.findIndex(size =>
          R.equals(size.id.toString(), dish.SelectedSize.toString())
        );
        const RestDishSize_id = dish.dish_sizes[sizeIdx].rest_dish_sizes.id;
        await client
          .service("dishes-in-menu")
          .findOne({ query: { RestDishSize_id } })
          .then(dish => dish.id)
          .then(dishInMenuId => {
            createDishesInScheduleItem({
              Dish_id: dishInMenuId,
              ScheduleItem_id: si.id,
              Ammount: dish.count,
              ScheduleItemPrice: dish.totalPrice
            }).then(dishInSI => {
              if (
                !R.isNil(dish.addlProducts) &&
                !R.isEmpty(dish.addlProducts)
              ) {
                Promise.all(
                  R.forEach(async p => {
                    await createAddlProductForSI(dishInSI.id, p.id);
                  }, dish.addlProducts)
                );
              }
            });
          });
      });
    }
    return si;
  });

export const deleteEvent = eventId =>
  client.service("schedule-items").remove(eventId);

export const createScheduleItem = scheduleItem =>
  client.service("schedule-items").create(scheduleItem);

export const createDishesInScheduleItem = dishInItem =>
  client.service("dishes-in-schedule-item").create(dishInItem);

export const getScheduleItemsByCustId = Cust_id =>
  client
    .service("schedule-items")
    .find({ query: { Cust_id } })
    .then(res => res.data);
