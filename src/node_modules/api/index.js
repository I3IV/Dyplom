import cities from './mock-cities';
import countries from './mock-countries';
import cuisines from './mock-cuisines';
import dishes from './mock-dishes';
import dishCategories from './mock-dish-categories';
import dishSizes from './mock-dish-sizes';
import restaurants from './mock-restaurants';
import seats from './mock-seats';
import products from './mock-products';
import addresses from './mock-addresses'

const feathers = require('@feathersjs/client');
const io = require('socket.io-client');

const socket = io('http://localhost:3030');

// @feathersjs/client is exposed as the `feathers` global.
const client = feathers();
client.configure(feathers.socketio(socket));
// Use localStorage to store our login token

export const getAllRestaurants = async () => {
  const messages = await client.service('restaurants').find();
  console.log("RESTAURANTS --start--", messages.data);
  return messages.data;
}

const itemsSelect = items => {
  return items.map(item => ({
    value: item.label,
    label: item.label,
    })
  );
}

export {
  dishes,
  restaurants,
};
const getItemsByParentId = (item_id, arr) => {
  const propName = Object.keys(item_id)[0];
  const itemId = item_id[propName];
  if(!itemId) return [];
  return  arr.filter((item) => {if(Array.isArray(item[propName]))
                                {
                                  return item[propName].includes(itemId)
                                }
                               else
                                  return item[propName].toString() === itemId.toString()
                                });
}
const getSelectItemsByParentId = (item_id, arr) =>
  getItemsByParentId(item_id, arr).map((item) => ({value: item.id,
                             label: item.name}));

const getItemNameById = (item_id, arr) => {
  const idx = arr.findIndex((item) => item.id === item_id);
  return idx !== -1 ? arr[idx].name : '';
}
const getItemById = (item_id, arr) => {
  const idx = arr.findIndex((item) => item.id.toString() === item_id.toString());
  return idx !== -1 ? arr[idx] : '';
}

export const citiesSelectItems = itemsSelect(cities);
export const countriesSelectItems = itemsSelect(countries);
export const cuisinesSelectItems = itemsSelect(cuisines);
export const seatsSelectItems = seats.map((item, index) => ({
  value: index+1,
  label: item.label,
  })
);
export const restaurantsSelectItems = restaurants.map((rest) => ({
  value: rest.id,
  label: rest.name,
  })
);
export const addressesSelectItems = addresses.map((addr) => ({
  value: addr.id,
  label: addr.name,
  })
);
export const
  dishCategoriesSelectItems = (restaurant_id) => getSelectItemsByParentId({restaurant_id}, dishCategories);

export const
  dishesSelectItems = (category_id) => getSelectItemsByParentId({category_id}, dishes);

export const
  productsSelectItems = (dish_id) => getSelectItemsByParentId({dish_id}, products);

export const
  dishSizesSelectItems = (dish_id) => {
                                        const idx = dishes.findIndex((item) => item.id === dish_id);
                                        const sizes = dishes[idx].size_id;
                                        return dishSizes.filter((item) => (sizes.includes(item.id)));
                                      };
export const
  restaurantIdToName = (id) => getItemNameById(id, restaurants);

export const
  dishCategoryIdToName = (id) => getItemNameById(id, dishCategories);

export const
  dishIdToName = (id) => getItemNameById(id, dishes);

export const
  getRestaurantById = (id) => getItemById(id, restaurants);

export const
  getDishesByCategoryId = (category_id) => getItemsByParentId({category_id}, dishes)
