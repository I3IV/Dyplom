{"ast":null,"code":"import _defineProperty from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\src\\\\components\\\\pages\\\\registration-page\\\\registration-form\\\\registration-form.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport \"../registration-page.css\";\nimport client from \"feathers/client\";\nimport { Redirect } from \"react-router-dom\";\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nvar strongRegexPass = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\nvar strongRegexNameSurname = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])\");\nvar strongRegexPhone = new RegExp(\"^(\\\\+(([0-9]){1,2})[-.])?((((([0-9]){2,3})[-.]){1,2}([0-9]{4,10}))|([0-9]{10}))$\");\n\nvar RegistrationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegistrationForm, _Component);\n\n  function RegistrationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegistrationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegistrationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoggedIn: false,\n      email: '',\n      name: '',\n      surname: '',\n      phone: '',\n      password: '',\n      passwordpass: ''\n    };\n\n    _this.updateField = function (ev) {\n      _this.setState(_defineProperty({}, ev.target.name, ev.target.value));\n    };\n\n    _this.handleSubmit = function () {\n      _this.signup();\n    };\n\n    return _this;\n  }\n\n  _createClass(RegistrationForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ValidatorForm.addValidationRule('password', function (value) {\n        return strongRegexPass.test(value);\n      });\n      ValidatorForm.addValidationRule('name', function (value) {\n        return strongRegexNameSurname.test(value);\n      });\n      ValidatorForm.addValidationRule('surname', function (value) {\n        return strongRegexNameSurname.test(value);\n      });\n      ValidatorForm.addValidationRule('phone', function (value) {\n        return strongRegexPhone.test(value);\n      });\n      ValidatorForm.addValidationRule('isPasswordMatch', function (value) {\n        if (value !== _this2.state.password) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password;\n      console.log(\"logIn\");\n      return client.authenticate({\n        strategy: \"local\",\n        email: email,\n        password: password\n      }).then(function () {\n        _this3.setState({\n          error: null,\n          isLoggedIn: true\n        });\n      });\n    }\n  }, {\n    key: \"signup\",\n    value: function signup() {\n      var _this4 = this;\n\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          name = _this$state2.name,\n          surname = _this$state2.surname,\n          phone = _this$state2.phone;\n      return client.service(\"customers\").create({\n        email: email,\n        password: password,\n        CustName: name,\n        CustSurname: surname,\n        CustPhone: phone,\n        City_id: 1\n      }).then(function () {\n        return _this4.login();\n      }).catch(function (error) {\n        _this4.setState({\n          error: error\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      //this.state.error && console.log(\"ERROR\", this.state.error.errors);\n      if (this.state.isLoggedIn) return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleSubmit,\n        onError: function onError(errors) {\n          return console.log(errors);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: \"paper-form\",\n        elevation: 15,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Registration\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.error && \"Something wrong: \".concat(this.state.error)), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Name\",\n        value: this.state.name,\n        name: \"name\",\n        type: \"name\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        placeholder: \"Name\",\n        validators: ['name', 'required'],\n        errorMessages: ['The name must contain lowercase and uppercase', 'Name is required'],\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"br\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Surname\",\n        type: \"Surname\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.surname,\n        name: \"surname\",\n        placeholder: \"Surname\",\n        validators: ['surname', 'required'],\n        errorMessages: ['The surname must contain lowercase and uppercase', 'Surname is required'],\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Email\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.email,\n        name: \"email\",\n        placeholder: \"example@domain.com\",\n        validators: ['required', 'isEmail'],\n        errorMessages: ['The email is required', 'Email is not valid'],\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"br\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Phone Number\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.phone,\n        name: \"phone\",\n        type: \"phone\",\n        validators: ['phone', 'required'],\n        errorMessages: ['The phone must contain only numbers', 'Phone is required'],\n        placeholder: \"+48 888 888 888\",\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Password\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.password,\n        name: \"password\",\n        type: \"password\",\n        validators: ['password', 'required'],\n        errorMessages: ['The password must contain lowercase, uppercase number', 'Password is required'],\n        placeholder: \"Password\",\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"br\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Confirm Password\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.passwordpass,\n        name: \"passwordpass\",\n        type: \"password\",\n        validators: ['isPasswordMatch', 'required'],\n        errorMessages: ['password mismatch', 'this field is required'],\n        placeholder: \"Confirm password\",\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"button\",\n        type: \"submit\",\n        onClick: function onClick() {\n          _this5.signup();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Create account\"), React.createElement(Link, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Already have one?\")))));\n    }\n  }]);\n\n  return RegistrationForm;\n}(Component);\n\nexport default RegistrationForm;","map":{"version":3,"sources":["D:\\Studia\\React\\I3IV\\Dyplom\\src\\components\\pages\\registration-page\\registration-form\\registration-form.js"],"names":["React","Component","Link","Paper","Button","TextField","client","Redirect","ValidatorForm","TextValidator","strongRegexPass","RegExp","strongRegexNameSurname","strongRegexPhone","RegistrationForm","state","isLoggedIn","email","name","surname","phone","password","passwordpass","updateField","ev","setState","target","value","handleSubmit","signup","addValidationRule","test","console","log","authenticate","strategy","then","error","service","create","CustName","CustSurname","CustPhone","City_id","login","catch","errors"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"../registration-page.css\";\r\nimport client from \"feathers/client\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\n\r\nconst strongRegexPass = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\")\r\nconst strongRegexNameSurname = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])\")\r\nconst strongRegexPhone = new RegExp(\"^(\\\\+(([0-9]){1,2})[-.])?((((([0-9]){2,3})[-.]){1,2}([0-9]{4,10}))|([0-9]{10}))$\")\r\n\r\nclass RegistrationForm extends Component {\r\n  state = {\r\n    isLoggedIn: false,\r\n    email: '',\r\n    name: '',\r\n    surname: '',\r\n    phone: '',\r\n    password: '',\r\n    passwordpass: ''\r\n  };\r\n\r\n  componentDidMount(){\r\n    ValidatorForm.addValidationRule('password', value => strongRegexPass.test(value))\r\n\r\n    ValidatorForm.addValidationRule('name', value => strongRegexNameSurname.test(value))\r\n\r\n    ValidatorForm.addValidationRule('surname', value => strongRegexNameSurname.test(value))\r\n\r\n    ValidatorForm.addValidationRule('phone', value => strongRegexPhone.test(value))\r\n\r\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n        if (value !== this.state.password) {\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n  }\r\n\r\n  login() {\r\n    const { email, password } = this.state;\r\n    console.log(\"logIn\");\r\n\r\n    return client\r\n      .authenticate({\r\n        strategy: \"local\",\r\n        email,\r\n        password\r\n      })\r\n      .then(() => {\r\n        this.setState({ error: null, isLoggedIn: true });\r\n      });\r\n  }\r\n  signup() {\r\n    const { email, password, name, surname, phone } = this.state;\r\n    return client\r\n      .service(\"customers\")\r\n      .create({\r\n        email,\r\n        password,\r\n        CustName:name,\r\n        CustSurname:surname,\r\n        CustPhone:phone,\r\n        City_id: 1\r\n      })\r\n      .then(() => this.login())\r\n      .catch(error => {\r\n        this.setState({ error });\r\n      });\r\n  }\r\n\r\n  updateField = (ev) => {\r\n     this.setState({ [ev.target.name]: ev.target.value });\r\n   }\r\n\r\n  handleSubmit = () => {\r\n    this.signup();\r\n  }\r\n\r\n  render() {\r\n    //this.state.error && console.log(\"ERROR\", this.state.error.errors);\r\n\r\n    if (this.state.isLoggedIn) return <Redirect to=\"/\" />;\r\n    return (\r\n      <div className=\"form\">\r\n      <ValidatorForm\r\n            ref=\"form\"\r\n            onSubmit={this.handleSubmit}\r\n            onError={errors => console.log(errors)}\r\n        >\r\n        <Paper className=\"paper-form\" elevation={15}>\r\n          <span className=\"label\">Registration</span>\r\n          <p>{this.state.error && `Something wrong: ${this.state.error}`}</p>\r\n          <div className=\"row\">\r\n            <TextValidator\r\n              className=\"input\"\r\n              label=\"Name\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              type=\"name\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              placeholder=\"Name\"\r\n              validators={['name','required']}\r\n              errorMessages={['The name must contain lowercase and uppercase','Name is required']}\r\n              onChange={this.updateField}\r\n            />\r\n            <span className=\"br\" />\r\n            <TextValidator\r\n              className=\"input\"\r\n              label=\"Surname\"\r\n              type=\"Surname\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={this.state.surname}\r\n              name=\"surname\"\r\n              placeholder=\"Surname\"\r\n              validators={['surname','required']}\r\n              errorMessages={['The surname must contain lowercase and uppercase','Surname is required']}\r\n              onChange={this.updateField}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <TextValidator\r\n              className=\"input\"\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={this.state.email}\r\n              name=\"email\"\r\n              placeholder=\"example@domain.com\"\r\n              validators={['required', 'isEmail']}\r\n              errorMessages={['The email is required', 'Email is not valid']}\r\n              onChange={this.updateField}\r\n            />\r\n            <span className=\"br\" />\r\n            <TextValidator\r\n              className=\"input\"\r\n              label=\"Phone Number\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={this.state.phone}\r\n              name=\"phone\"\r\n              type=\"phone\"\r\n              validators={['phone','required']}\r\n              errorMessages={['The phone must contain only numbers','Phone is required']}\r\n              placeholder=\"+48 888 888 888\"\r\n              onChange={this.updateField}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <TextValidator\r\n              className=\"input\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={this.state.password}\r\n              name=\"password\"\r\n              type=\"password\"\r\n              validators={['password','required']}\r\n              errorMessages={['The password must contain lowercase, uppercase number','Password is required']}\r\n              placeholder=\"Password\"\r\n              onChange={this.updateField}\r\n            />\r\n            <span className=\"br\" />\r\n            <TextValidator\r\n              className=\"input\"\r\n              label=\"Confirm Password\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={this.state.passwordpass}\r\n              name=\"passwordpass\"\r\n              type=\"password\"\r\n              validators={['isPasswordMatch', 'required']}\r\n              errorMessages={['password mismatch', 'this field is required']}\r\n              placeholder=\"Confirm password\"\r\n              onChange={this.updateField}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <Button\r\n              className=\"button\"\r\n              type=\"submit\"\r\n              onClick={() => {\r\n                this.signup();\r\n              }}\r\n            >\r\n              Create account\r\n            </Button>\r\n            <Link to=\"/login\">Already have one?</Link>\r\n          </div>\r\n\r\n        </Paper>\r\n        </ValidatorForm>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegistrationForm;\r\n"]},"metadata":{},"sourceType":"module"}