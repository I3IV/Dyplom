import React, { Fragment, Component } from "react";
import PropTypes from "prop-types";
import {
  Paper,
  Typography,
  Divider,
  Radio,
  TextField,
  MuiThemeProvider,
  Button
} from "@material-ui/core";
import { withStyles } from "@material-ui/core/styles";
import styles from "./styles";
import DishesList from "components/pages/schedule-items-page/schedule-item-dishes-list";
import {
  dishDelete,
  dishDown,
  dishUp,
  getCustomerAddressesSelect,
  seatsSelectItems
} from "api";
import { cartStore, authStore } from "store";
import { observer } from "mobx-react";
import DishPage from "components/pages/dish-page/dish-page";
import RadioSelect from "shared-components/radio-select";
import * as R from "ramda";
import SelectControl from "shared-components/select-control";
import Address from "./address";
import DatePicker from "shared-components/date-picker";
import TimePicker from "shared-components/time-picker";
const formatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2
});

class Order extends Component {
  state = { openDish: false, dishToShow: {}, location: "1" };
  deliveryLocations = [
    { id: 1, name: "In restaurant" },
    { id: 2, name: "Deliver to address" }
  ];

  componentDidMount() {
    if (authStore.isAuthenticated)
      this.setSelect(getCustomerAddressesSelect, "SelectAddresses");
  }
  componentWillUnmount() {
    this.isUnmounted = true;
  }
  setSelect(selectMethod, selectName) {
    this.setState({ loading: true });
    selectMethod().then(selects => {
      if (this.isUnmounted) {
        return;
      }
      this.setState({ [selectName]: selects, loading: false });
    });
  }
  handleDishClick = id => {
    const dishes = cartStore.cart ? cartStore.cart.dishes : 0;
    const dishToShow = R.find(d => (d.id = id), dishes);
    this.setState({ dishToShow, openDish: true });
  };
  handleDishClose = () => {
    this.setState({ openDish: false });
  };
  handleChangeLocation = location => {
    this.setState({ location });
  };
  handleAddressChange = ({ value }) => {
    this.setState({
      address_id: value
    });
  };
  onAddressEntered = () => {
    this.setState({
      address_id: 0
    });
  };
  handleSeatsChange = ({ value }) => {
    this.setState({
      seats: value
    });
  };

  render() {
    const { classes } = this.props;
    const {
      location,
      SelectAddresses,
      seats,
      address_id,
      loading,
      dishToShow,
      openDish
    } = this.state;
    const cart = cartStore.cart ? cartStore.cart : undefined;
    const addr = SelectAddresses
      ? R.find(a => a.value === address_id, SelectAddresses)
      : undefined;
    const addressLabel = addr ? addr.label : "";
    const totalPrice = cart ? cart.totalPrice : 0;
    const promoPrice =
      cart && cart.promoPrice && cart.promoPrice !== totalPrice
        ? cart.promoPrice
        : undefined;
    const totalPriceStyle = promoPrice
      ? {
          textDecorationLine: "line-through",
          color: "gray"
        }
      : { textDecorationLine: "none" };
    return (
      <Fragment>
        <div className={classes.root}>
          <Paper className={classes.paper} elevation={15}>
            <div className={classes.content}>
              <Typography
                gutterBottom
                variant="h5"
                component="h2"
                align="center"
              >
                Your order
              </Typography>
              <Typography variant="h6" color="textSecondary">
                Dishes in your order
              </Typography>
              <DishesList
                items={cart ? cart.dishes : []}
                onDishUp={dishUp}
                onDishDown={dishDown}
                onDishDelete={dishDelete}
                onDishClick={this.handleDishClick}
                cartPrice={totalPrice}
                maxWidth={"100%"}
              />
              <Typography variant="h6" color="textSecondary">
                Choose location
              </Typography>
              <RadioSelect
                items={this.deliveryLocations}
                name="location"
                selected={location}
                direction={"row"}
                onChange={this.handleChangeLocation}
              />
              {location === "1" && (
                <SelectControl
                  onSelectChange={this.handleSeatsChange}
                  name="seats"
                  items={seatsSelectItems}
                  value={seats}
                  emptyValue="Select seats number"
                />
              )}
              {location === "2" &&
                authStore.isAuthenticated &&
                !loading && (
                  <Typography color="textSecondary" align="right">
                    <SelectControl
                      onSelectChange={this.handleAddressChange}
                      name="title"
                      value={address_id}
                      items={SelectAddresses}
                      emptyValue="Select address"
                    />
                  </Typography>
                )}
              {location === "2" && (
                <Fragment>
                  <Typography variant="Title" color="textSecondary">
                    Delivery address
                  </Typography>
                  <Address
                    address={addressLabel}
                    handleChange={this.onAddressEntered}
                  />
                </Fragment>
              )}
              <Typography
                variant="h6"
                color="textSecondary"
                style={{ marginTop: "0.5rem" }}
              >
                Date & Time
              </Typography>
              <DatePicker />
              <TimePicker />
              <TextField
                id="filled-textarea"
                placeholder="Enter your comment"
                multiline
                rows="4"
                margin="normal"
                variant="filled"
              />
              <Typography variant="h6" color="textSecondary" align="right">
                Total
              </Typography>
              <Typography
                variant="h6"
                color="textPrimary"
                align="right"
                style={totalPriceStyle}
              >
                {formatter.format(totalPrice)}
              </Typography>
              {promoPrice && (
                <Typography variant="h6" color="primary" align="right">
                  {formatter.format(promoPrice)}
                </Typography>
              )}
              <Button
                onClick={this.handleApply}
                color="secondary"
                variant="outlined"
                size="large"
                fullWidth
                className={classes.button}
              >
                Pay
              </Button>
            </div>
          </Paper>
        </div>
        <DishPage
          openDish={this.state.openDish}
          handleClose={this.handleDishClose}
          dishToShow={dishToShow}
          updateDish={true}
        />
      </Fragment>
    );
  }
}

Order.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(observer(Order));
