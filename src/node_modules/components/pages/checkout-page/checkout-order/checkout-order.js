import React, { Fragment, Component } from "react";
import PropTypes from "prop-types";
import {
  Paper,
  Typography,
  TextField,
  Button,
  Checkbox,
  FormControlLabel
} from "@material-ui/core";
import { withStyles } from "@material-ui/core/styles";
import styles from "./styles";
import DishesList from "components/pages/schedule-items-page/schedule-item-dishes-list";
import {
  createNewCart,
  dishDelete,
  dishDown,
  dishUp,
  getCustomerAddressesSelect,
  seatsSelectItems
} from "api";
import { cartStore, authStore } from "store";
import { observer } from "mobx-react";
import DishPage from "components/pages/dish-page/dish-page";
import RadioSelect from "shared-components/radio-select";
import * as R from "ramda";
import SelectControl from "shared-components/select-control";
import Address from "./address";
import DateTimePicker from "shared-components/date-time-picker";
import { IN_RESTAURANT, DELIVER_TO_ADDRESS } from "shared-components/constants";
import { createNewOrder } from "api";
import MuiPhoneNumber from "material-ui-phone-number";
const formatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2
});

class Order extends Component {
  state = {
    openDish: false,
    dishToShow: {},
    location: IN_RESTAURANT,
    comment: "",
    phone: "",
    orderDateTime: new Date(),
    addAddressChecked: false
  };
  deliveryLocations = [
    { id: IN_RESTAURANT, name: "In restaurant" },
    { id: DELIVER_TO_ADDRESS, name: "Deliver to address" }
  ];

  componentDidMount() {
    if (authStore.isAuthenticated)
      this.setSelect(getCustomerAddressesSelect, "SelectAddresses");
  }
  componentWillUnmount() {
    this.isUnmounted = true;
  }
  setSelect(selectMethod, selectName) {
    this.setState({ loading: true });
    selectMethod().then(selects => {
      if (this.isUnmounted) {
        return;
      }
      this.setState({
        [selectName]: selects,
        loading: false
      });
      if (!cartStore.cart.Restaurant_id) {
        this.setState({ location: DELIVER_TO_ADDRESS });
      }
    });
  }
  handleDishClick = id => {
    const dishes = cartStore.cart ? cartStore.cart.dishes : 0;
    const dishToShow = R.find(d => d.id === id, dishes);
    this.setState({ dishToShow, openDish: true });
  };
  handleDishClose = () => {
    this.setState({ openDish: false });
  };
  handleChangeLocation = location => {
    this.setState({ location });
  };
  handleAddressChange = ({ value }) => {
    this.setState({
      address_id: value
    });
  };
  onAddressEntered = addressString => {
    const { SelectAddresses } = this.state;

    const toArr = val => R.map(R.trim, R.split(",", val));
    const address = R.zipObj(
      ["StreetName", "StreetNumber", "ZipCode"],
      R.takeLast(3, toArr(addressString))
    );

    const addr = SelectAddresses
      ? R.find(
          a => R.equals(toArr(a.label), toArr(addressString)),
          SelectAddresses
        )
      : undefined;

    this.setState({
      address_id: addr ? addr.value : 0,
      address
    });
  };
  handleSeatsChange = ({ value }) => {
    this.setState({
      seats: value
    });
  };
  handleDateChange = dateTime => {
    this.setState({ orderDateTime: dateTime });
  };
  handlePhoneChange = value =>
    this.setState({
      phone: value
    });
  handleChange = name => event => {
    this.setState({ [name]: event.target.value });
  };
  handleChangeCheckBox = name => event => {
    this.setState({ [name]: event.target.checked });
  };
  handleApply = () => {
    const {
      comment,
      orderDateTime,
      phone,
      location,
      address_id,
      address,
      addAddressChecked
    } = this.state;
    const { promoPrice, totalPrice } = cartStore.cart;
    createNewOrder({
      ...cartStore.cart,
      totalPrice: promoPrice ? promoPrice : totalPrice,
      address_id,
      location,
      comment,
      orderDateTime,
      phone,
      address,
      addAddressChecked
    });
    createNewCart();
  };

  render() {
    const { classes } = this.props;
    const {
      location,
      SelectAddresses,
      seats,
      address_id,
      loading,
      dishToShow,
      orderDateTime,
      comment,
      addAddressChecked
    } = this.state;
    const cart = cartStore.cart ? cartStore.cart : undefined;
    const disabledLocations =
      cart && !cart.Restaurant_id ? [IN_RESTAURANT] : [];
    const disableReason = R.isEmpty(disabledLocations)
      ? undefined
      : "You can choose delivery only, because the dishes in your order are from different restaurants";
    const addr = SelectAddresses
      ? R.find(a => a.value === address_id, SelectAddresses)
      : undefined;
    const addressLabel = addr ? addr.label : "";
    const totalPrice = cart ? cart.totalPrice : 0;
    const promoPrice =
      cart && cart.promoPrice && cart.promoPrice !== totalPrice
        ? cart.promoPrice
        : undefined;
    const totalPriceStyle = promoPrice
      ? {
          textDecorationLine: "line-through",
          color: "gray"
        }
      : { textDecorationLine: "none" };
    return (
      <Fragment>
        <div className={classes.root}>
          <Paper className={classes.paper} elevation={15}>
            <div className={classes.content}>
              <Typography
                gutterBottom
                variant="h5"
                component="h2"
                align="center"
              >
                Your order
              </Typography>
              <Typography variant="h6" color="textSecondary">
                Dishes in your order
              </Typography>
              <DishesList
                items={cart ? cart.dishes : []}
                onDishUp={dishUp}
                onDishDown={dishDown}
                onDishDelete={dishDelete}
                onDishClick={this.handleDishClick}
                cartPrice={totalPrice}
                maxWidth={"100%"}
              />
              <Typography variant="h6" color="textSecondary">
                Choose location
              </Typography>
              <RadioSelect
                items={this.deliveryLocations}
                name="location"
                selected={location}
                disabledIds={disabledLocations}
                helperText={disableReason}
                direction={"row"}
                onChange={this.handleChangeLocation}
              />
              {location === IN_RESTAURANT && (
                <SelectControl
                  onSelectChange={this.handleSeatsChange}
                  name="seats"
                  items={seatsSelectItems}
                  value={seats}
                  emptyValue="Select seats number"
                />
              )}
              {location === DELIVER_TO_ADDRESS &&
                authStore.isAuthenticated &&
                !loading && (
                  <Typography
                    color="textSecondary"
                    align="right"
                    component="div"
                  >
                    <SelectControl
                      onSelectChange={this.handleAddressChange}
                      name="title"
                      value={address_id}
                      items={SelectAddresses}
                      emptyValue="Select address"
                    />
                  </Typography>
                )}
              {location === DELIVER_TO_ADDRESS && (
                <Fragment>
                  <Typography variant="subtitle2" color="textSecondary">
                    Delivery address
                  </Typography>
                  <Address
                    address={addressLabel}
                    handleChange={this.onAddressEntered}
                  />
                  {authStore.isAuthenticated && (
                    <FormControlLabel
                      disabled={!!address_id}
                      control={
                        <Checkbox
                          checked={addAddressChecked}
                          onChange={this.handleChangeCheckBox(
                            "addAddressChecked"
                          )}
                          value="addAddressChecked"
                        />
                      }
                      label="Add to my delivery addresses"
                    />
                  )}
                </Fragment>
              )}
              <Typography
                variant="h6"
                color="textSecondary"
                style={{ marginTop: "0.5rem" }}
              >
                Date & Time
              </Typography>
              <DateTimePicker
                selectedDate={orderDateTime}
                handleDateChange={this.handleDateChange}
              />
              {!authStore.isAuthenticated && (
                <Fragment>
                  <Typography
                    variant="h6"
                    color="textSecondary"
                    style={{ marginTop: "0.5rem" }}
                  >
                    Your phone number
                  </Typography>
                  <MuiPhoneNumber
                    defaultCountry={"pl"}
                    value={this.state.phone}
                    helperText="Please, provide us your phone number to proceed your order."
                    regions={"europe"}
                    inputProps={{ style: { width: "11.8rem" } }}
                    onChange={this.handlePhoneChange}
                  />
                </Fragment>
              )}
              <TextField
                id="filled-textarea"
                placeholder="Enter your comment"
                multiline
                value={comment}
                rows="4"
                margin="normal"
                variant="filled"
                onChange={this.handleChange("comment")}
              />
              <Typography variant="h6" color="textSecondary" align="right">
                Total
              </Typography>
              <Typography
                variant="h6"
                color="textPrimary"
                align="right"
                style={totalPriceStyle}
              >
                {formatter.format(totalPrice)}
              </Typography>
              {promoPrice && (
                <Typography variant="h6" color="primary" align="right">
                  {formatter.format(promoPrice)}
                </Typography>
              )}
              <Button
                onClick={this.handleApply}
                color="secondary"
                variant="outlined"
                size="large"
                fullWidth
                className={classes.button}
              >
                Pay
              </Button>
            </div>
          </Paper>
        </div>
        <DishPage
          openDish={this.state.openDish}
          handleClose={this.handleDishClose}
          dishToShow={dishToShow}
          updateDish={true}
        />
      </Fragment>
    );
  }
}

Order.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(observer(Order));
