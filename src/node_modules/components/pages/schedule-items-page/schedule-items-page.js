import React, { Component } from "react";
import BigCalendar from "react-big-calendar";
import "react-big-calendar/lib/css/react-big-calendar.css";
import moment from "moment";
import ScheduleDialog from "./schedule-dialog";
import { createEvent, getEvents, deleteEvent } from "api";
import Spinner from "shared-components/spinner";
import {calendarStore} from "store";

const localizer = BigCalendar.momentLocalizer(moment);
const events = [];

export default class MyCalendar extends Component {
  state = {
    events,
    selectedEvent: {},
    dialogOpen: false,
    editItem: false
  };
  componentDidMount() {
    this.setState({ loading: true });
    getEvents().then(events => {
      if (this.isUnmounted) {
        return;
      }
      calendarStore.setBadge(events.length);
      this.setState({ events, loading: false });
    });
  }
  componentWillUnmount() {
    this.isUnmounted = true;
  }
  handleAddApply = event => {
    if (event.restaurant_id) {
      createEvent(event).then(si => {
        this.setState({
          events: [...this.state.events, { ...event, ScheduleItem_id: si.id }],
          dialogOpen: false
        });
      });
      getEvents().then(events => {
        calendarStore.setBadge(events.length);
      });
    }
  };
  handleEditApply = async newEvent => {
    const oldEvents = this.state.events;
    const idx = oldEvents.findIndex(
      ev => ev.ScheduleItem_id === newEvent.ScheduleItem_id
    );

    if (newEvent.restaurant_id) {
      if (newEvent.ScheduleItem_id)
        deleteEvent(newEvent.ScheduleItem_id).then(
          createEvent(newEvent).then(si => {
            this.setState({
              events: [
                ...oldEvents.slice(0, idx),
                { ...newEvent, ScheduleItem_id: si.id },
                ...oldEvents.slice(idx + 1)
              ],
              dialogOpen: false
            });
          })
        );
    }
  };

  handleDelete = ({ start, end, ScheduleItem_id }) => {
    const oldEvents = this.state.events;
    const idx = oldEvents.findIndex(ev => ev.ScheduleItem_id === ScheduleItem_id);
    this.setState({
      events: [...oldEvents.slice(0, idx), ...oldEvents.slice(idx + 1)]
    });
    if (ScheduleItem_id) deleteEvent(ScheduleItem_id);
    getEvents().then(events => {
      calendarStore.setBadge(events.length);
    });
  };

  handleSelectSlot = event => {
    this.setState({
      dialogOpen: true,
      editItem: false,
      selectedEvent: { ...event, dishes: [] }
    });
  };
  handleSelectEvent = event => {
    this.setState({
      dialogOpen: true,
      editItem: true,
      selectedEvent: event
    });
  };

  render(props) {
    if (this.state.loading) return <Spinner />;
    const handleApply = this.state.editItem
      ? this.handleEditApply
      : this.handleAddApply;
    return (
      <div>
        <ScheduleDialog
          dialogOpen={this.state.dialogOpen}
          event={this.state.selectedEvent}
          handleApply={handleApply}
          handleDelete={this.handleDelete}
          editItem={this.state.editItem}
        />
        <BigCalendar
          style={{ height: "420px", marginLeft: "5rem", marginRight: "5rem" }}
          selectable
          popup
          showMultiDayTimes
          localizer={localizer}
          events={this.state.events}
          defaultView={BigCalendar.Views.WEEK}
          scrollToTime={new Date(1970, 1, 1, 6)}
          onSelectSlot={this.handleSelectSlot}
          onSelectEvent={this.handleSelectEvent}
        />
      </div>
    );
  }
}
