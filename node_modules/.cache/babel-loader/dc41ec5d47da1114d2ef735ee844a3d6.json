{"ast":null,"code":"import _concat from './internal/_concat';\nimport _createPartialApplicator from './internal/_createPartialApplicator';\nimport flip from './flip';\n/**\r\n * Takes a function `f` and a list of arguments, and returns a function `g`.\r\n * When applied, `g` returns the result of applying `f` to the arguments\r\n * provided to `g` followed by the arguments provided initially.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\r\n * @param {Function} f\r\n * @param {Array} args\r\n * @return {Function}\r\n * @see R.partial\r\n * @example\r\n *\r\n *      var greet = (salutation, title, firstName, lastName) =>\r\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\r\n *\r\n *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\r\n *\r\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\r\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\r\n */\n\nvar partialRight =\n/*#__PURE__*/\n_createPartialApplicator(\n/*#__PURE__*/\nflip(_concat));\n\nexport default partialRight;","map":null,"metadata":{},"sourceType":"module"}