{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Studia\\\\React\\\\I3IV\\\\Dyplom\\\\src\\\\node_modules\\\\components-illia\\\\pages\\\\registration-page\\\\registration-form\\\\registration-form.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport \"../registration-page.css\";\nimport client from \"feathers/client\";\nimport { Redirect } from \"react-router-dom\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport Spinner from \"shared-components/spinner\";\nvar strongRegexPass = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\nvar strongRegexNameSurname = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])\");\nvar strongRegexPhone = new RegExp(\"^(\\\\+(([0-9]){1,2})[-.])?((((([0-9]){2,3})[-.]){1,2}([0-9]{4,10}))|([0-9]{9}))$\");\n\nvar RegistrationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegistrationForm, _Component);\n\n  function RegistrationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegistrationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegistrationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoggedIn: false,\n      email: \"\",\n      name: \"\",\n      surname: \"\",\n      phone: \"\",\n      password: \"\",\n      passwordpass: \"\"\n    };\n\n    _this.updateField = function (ev) {\n      _this.setState(_defineProperty({}, ev.target.name, ev.target.value));\n    };\n\n    _this.handleSubmit = function () {\n      _this.signup();\n    };\n\n    return _this;\n  }\n\n  _createClass(RegistrationForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ValidatorForm.addValidationRule(\"password\", function (value) {\n        return strongRegexPass.test(value);\n      });\n      ValidatorForm.addValidationRule(\"name\", function (value) {\n        return strongRegexNameSurname.test(value);\n      });\n      ValidatorForm.addValidationRule(\"surname\", function (value) {\n        return strongRegexNameSurname.test(value);\n      });\n      ValidatorForm.addValidationRule(\"phone\", function (value) {\n        return strongRegexPhone.test(value);\n      });\n      ValidatorForm.addValidationRule(\"isPasswordMatch\", function (value) {\n        if (value !== _this2.state.password) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var _this$state, email, password;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$state = this.state, email = _this$state.email, password = _this$state.password;\n                _context.next = 3;\n                return client.authenticate({\n                  strategy: \"local\",\n                  email: email,\n                  password: password\n                }).then(function (response) {\n                  return client.passport.verifyJWT(response.accessToken);\n                }).then(function (user) {\n                  client.set(\"user\", user);\n                }).then(function () {\n                  _this3.setState({\n                    error: null,\n                    isLoggedIn: true,\n                    loading: false\n                  });\n                }).catch(function (error) {\n                  _this3.setState({\n                    error: error,\n                    loading: false\n                  });\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function login() {\n        return _login.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"signup\",\n    value: function signup() {\n      var _this4 = this;\n\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          name = _this$state2.name,\n          surname = _this$state2.surname,\n          phone = _this$state2.phone;\n      this.setState({\n        loading: true\n      });\n      return client.service(\"customers\").create({\n        email: email,\n        password: password,\n        CustName: name,\n        CustSurname: surname,\n        CustPhone: phone,\n        City_id: 1\n      }).then(function () {\n        return _this4.login();\n      }).catch(function (error) {\n        _this4.setState({\n          error: error,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      //this.state.error && console.log(\"ERROR\", this.state.error.errors);\n      if (this.state.error) console.log(\"Something wrong: \".concat(this.state.error));\n      if (this.state.loading) return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n      if (!this.state.loading && this.state.isLoggedIn) return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleSubmit,\n        onError: function onError(errors) {\n          return console.log(errors);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: \"paper-form\",\n        elevation: 15,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Registration\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, this.state.error && \"Something wrong: \".concat(this.state.error)), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Name\",\n        value: this.state.name,\n        name: \"name\",\n        type: \"name\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        placeholder: \"Name\",\n        validators: [\"name\", \"required\"],\n        errorMessages: [\"The name must contain lowercase and uppercase\", \"Name is required\"],\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"br\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Surname\",\n        type: \"Surname\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.surname,\n        name: \"surname\",\n        placeholder: \"Surname\",\n        validators: [\"surname\", \"required\"],\n        errorMessages: [\"The surname must contain lowercase and uppercase\", \"Surname is required\"],\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Email\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.email,\n        name: \"email\",\n        placeholder: \"example@domain.com\",\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [\"The email is required\", \"Email is not valid\"],\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"br\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Phone Number\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.phone,\n        name: \"phone\",\n        type: \"phone\",\n        validators: [\"phone\", \"required\"],\n        errorMessages: [\"The phone must contain only numbers\", \"Phone is required\"],\n        placeholder: \"+48 888 888 888\",\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Password\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.password,\n        name: \"password\",\n        type: \"password\",\n        validators: [\"password\", \"required\"],\n        errorMessages: [\"The password must contain lowercase, uppercase number\", \"Password is required\"],\n        placeholder: \"Password\",\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"br\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(TextValidator, {\n        className: \"input\",\n        label: \"Confirm Password\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        value: this.state.passwordpass,\n        name: \"passwordpass\",\n        type: \"password\",\n        validators: [\"isPasswordMatch\", \"required\"],\n        errorMessages: [\"password mismatch\", \"this field is required\"],\n        placeholder: \"Confirm password\",\n        onChange: this.updateField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"button\",\n        type: \"submit\",\n        onClick: function onClick() {\n          _this5.signup();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Create account\"), React.createElement(Link, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Already have one?\")))));\n    }\n  }]);\n\n  return RegistrationForm;\n}(Component);\n\nexport default RegistrationForm;","map":{"version":3,"sources":["D:\\Studia\\React\\I3IV\\Dyplom\\src\\node_modules\\components-illia\\pages\\registration-page\\registration-form\\registration-form.js"],"names":["React","Component","Link","Paper","Button","client","Redirect","ValidatorForm","TextValidator","Spinner","strongRegexPass","RegExp","strongRegexNameSurname","strongRegexPhone","RegistrationForm","state","isLoggedIn","email","name","surname","phone","password","passwordpass","updateField","ev","setState","target","value","handleSubmit","signup","addValidationRule","test","authenticate","strategy","then","response","passport","verifyJWT","accessToken","user","set","error","loading","catch","service","create","CustName","CustSurname","CustPhone","City_id","login","console","log","errors"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport \"../registration-page.css\";\nimport client from \"feathers/client\";\nimport {Redirect} from \"react-router-dom\";\nimport {ValidatorForm, TextValidator} from \"react-material-ui-form-validator\";\nimport Spinner from \"shared-components/spinner\";\n\nconst strongRegexPass = new RegExp(\n    \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\"\n);\nconst strongRegexNameSurname = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])\");\nconst strongRegexPhone = new RegExp(\n    \"^(\\\\+(([0-9]){1,2})[-.])?((((([0-9]){2,3})[-.]){1,2}([0-9]{4,10}))|([0-9]{9}))$\"\n);\n\nclass RegistrationForm extends Component {\n    state = {\n        isLoggedIn: false,\n        email: \"\",\n        name: \"\",\n        surname: \"\",\n        phone: \"\",\n        password: \"\",\n        passwordpass: \"\"\n    };\n\n    componentDidMount() {\n        ValidatorForm.addValidationRule(\"password\", value =>\n            strongRegexPass.test(value)\n        );\n\n        ValidatorForm.addValidationRule(\"name\", value =>\n            strongRegexNameSurname.test(value)\n        );\n\n        ValidatorForm.addValidationRule(\"surname\", value =>\n            strongRegexNameSurname.test(value)\n        );\n\n        ValidatorForm.addValidationRule(\"phone\", value =>\n            strongRegexPhone.test(value)\n        );\n\n        ValidatorForm.addValidationRule(\"isPasswordMatch\", value => {\n            if (value !== this.state.password) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    async login() {\n        const {email, password} = this.state;\n        await client\n            .authenticate({\n                strategy: \"local\",\n                email,\n                password\n            })\n            .then(response => client.passport.verifyJWT(response.accessToken))\n            .then(user => {\n                client.set(\"user\", user);\n            })\n            .then(() => {\n                this.setState({error: null, isLoggedIn: true, loading: false});\n            })\n            .catch(error => {\n                this.setState({error, loading: false});\n            });\n    }\n\n    signup() {\n        const {email, password, name, surname, phone} = this.state;\n        this.setState({loading: true});\n        return client\n            .service(\"customers\")\n            .create({\n                email,\n                password,\n                CustName: name,\n                CustSurname: surname,\n                CustPhone: phone,\n                City_id: 1\n            })\n            .then(() => this.login())\n            .catch(error => {\n                this.setState({error, loading: false});\n            });\n    }\n\n    updateField = ev => {\n        this.setState({[ev.target.name]: ev.target.value});\n    };\n\n    handleSubmit = () => {\n        this.signup();\n    };\n\n    render() {\n        //this.state.error && console.log(\"ERROR\", this.state.error.errors);\n        if (this.state.error) console.log(`Something wrong: ${this.state.error}`);\n        if (this.state.loading) return <Spinner/>;\n        if (!this.state.loading && this.state.isLoggedIn)\n            return <Redirect to=\"/\"/>;\n        return (\n            <div className=\"form\">\n                <ValidatorForm\n                    ref=\"form\"\n                    onSubmit={this.handleSubmit}\n                    onError={errors => console.log(errors)}\n                >\n                    <Paper className=\"paper-form\" elevation={15}>\n                        <span className=\"label\">Registration</span>\n                        <p>{this.state.error && `Something wrong: ${this.state.error}`}</p>\n                        <div className=\"row\">\n                            <TextValidator\n                                className=\"input\"\n                                label=\"Name\"\n                                value={this.state.name}\n                                name=\"name\"\n                                type=\"name\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                placeholder=\"Name\"\n                                validators={[\"name\", \"required\"]}\n                                errorMessages={[\n                                    \"The name must contain lowercase and uppercase\",\n                                    \"Name is required\"\n                                ]}\n                                onChange={this.updateField}\n                            />\n                            <span className=\"br\"/>\n                            <TextValidator\n                                className=\"input\"\n                                label=\"Surname\"\n                                type=\"Surname\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                value={this.state.surname}\n                                name=\"surname\"\n                                placeholder=\"Surname\"\n                                validators={[\"surname\", \"required\"]}\n                                errorMessages={[\n                                    \"The surname must contain lowercase and uppercase\",\n                                    \"Surname is required\"\n                                ]}\n                                onChange={this.updateField}\n                            />\n                        </div>\n                        <div className=\"row\">\n                            <TextValidator\n                                className=\"input\"\n                                label=\"Email\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                value={this.state.email}\n                                name=\"email\"\n                                placeholder=\"example@domain.com\"\n                                validators={[\"required\", \"isEmail\"]}\n                                errorMessages={[\"The email is required\", \"Email is not valid\"]}\n                                onChange={this.updateField}\n                            />\n                            <span className=\"br\"/>\n                            <TextValidator\n                                className=\"input\"\n                                label=\"Phone Number\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                value={this.state.phone}\n                                name=\"phone\"\n                                type=\"phone\"\n                                validators={[\"phone\", \"required\"]}\n                                errorMessages={[\n                                    \"The phone must contain only numbers\",\n                                    \"Phone is required\"\n                                ]}\n                                placeholder=\"+48 888 888 888\"\n                                onChange={this.updateField}\n                            />\n                        </div>\n                        <div className=\"row\">\n                            <TextValidator\n                                className=\"input\"\n                                label=\"Password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                value={this.state.password}\n                                name=\"password\"\n                                type=\"password\"\n                                validators={[\"password\", \"required\"]}\n                                errorMessages={[\n                                    \"The password must contain lowercase, uppercase number\",\n                                    \"Password is required\"\n                                ]}\n                                placeholder=\"Password\"\n                                onChange={this.updateField}\n                            />\n                            <span className=\"br\"/>\n                            <TextValidator\n                                className=\"input\"\n                                label=\"Confirm Password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                value={this.state.passwordpass}\n                                name=\"passwordpass\"\n                                type=\"password\"\n                                validators={[\"isPasswordMatch\", \"required\"]}\n                                errorMessages={[\"password mismatch\", \"this field is required\"]}\n                                placeholder=\"Confirm password\"\n                                onChange={this.updateField}\n                            />\n                        </div>\n                        <div className=\"buttons\">\n                            <Button\n                                className=\"button\"\n                                type=\"submit\"\n                                onClick={() => {\n                                    this.signup();\n                                }}\n                            >\n                                Create account\n                            </Button>\n                            <Link to=\"/login\">Already have one?</Link>\n                        </div>\n                    </Paper>\n                </ValidatorForm>\n            </div>\n        );\n    }\n}\n\nexport default RegistrationForm;\n"]},"metadata":{},"sourceType":"module"}