import React from "react";
import "./navigation-list.css";
import NavigationListItem from "../navigation-list-item";
import Timeline from "@material-ui/icons/CalendarToday";
import IconButton from "@material-ui/core/es/IconButton/IconButton";
import Badge from "@material-ui/core/es/Badge/Badge";
import { Link } from "react-router-dom";
import ShoppingCart from "shared-components/shopping-cart";
import {
  authStore,
  citiesStore,
  calendarStore,
  restaurantsStore,
  cartStore
} from "store";
import { observer } from "mobx-react";
import CitiesSelect from "shared-components/cities-select";
import NoYesDialog from "shared-components/no-yes-dialog";
import * as R from "ramda";
import { filterByCity, createNewCart } from "api";

class Header extends React.Component {
  state = {
    openDialog: false
  };
  handleCityChange = value => {
    if (value === citiesStore.selectedCity) return;
    this.setState({ selectedCity: value });
    this.openCloseDialog(true);
  };
  handleDialogApply = () => {
    const { selectedCity } = this.state;
    citiesStore.setSelectedCity(selectedCity);
    filterByCity(selectedCity);
    createNewCart();
    this.openCloseDialog(false);
  };
  handleDialogClose = () => {
    this.openCloseDialog(false);
    citiesStore.setSelectedCity(citiesStore.selectedCity);
  };
  openCloseDialog = openClose => {
    this.setState({ openDialog: openClose });
  };

  render() {
    const navItemsGuest = [
      { label: "Sign in", link: "/login" },
      { label: "Sign up", link: "/registration" }
    ];
    console.log("citiesStore.selectedCity", citiesStore.selectedCity);
    const navItemsSignedIn = [{ label: "Account", link: "/account" }];
    console.log("isAuthenticated", authStore.isAuthenticated);
    const navItems = authStore.isAuthenticated
      ? navItemsSignedIn
      : navItemsGuest;
    return (
      <div className="navigation-list">
        <NoYesDialog
          handleApply={this.handleDialogApply}
          open={this.state.openDialog}
          handleClose={this.handleDialogClose}
          title="Cancel your previous order?"
          message={`Your previous order can be released in ${
            citiesStore.selectedCity
          } only. 
          Are you sure you want to cancel your previous order?`}
        />
        <CitiesSelect
          style={{ width: "7rem" }}
          cities={citiesStore.citiesWithRestaurants}
          value={citiesStore.selectedCity}
          handleChange={this.handleCityChange}
        />

        <ShoppingCart />
        {authStore.isAuthenticated && (
          <Link to="/scheduler">
            <IconButton>
              <Badge badgeContent={calendarStore.badge} color="primary">
                <Timeline />
              </Badge>
            </IconButton>
          </Link>
        )}
        <ul>
          {navItems.map(item => {
            return <NavigationListItem item={item} key={item.label} />;
          })}
        </ul>
      </div>
    );
  }
}

export default observer(Header);
