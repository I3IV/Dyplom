import * as R from "ramda";
import { cartStore } from "store";

const dishProps = [
  "name",
  "count",
  "sizes",
  "size_id",
  "defaultPhoto",
  "RestaurantName",
  "RestaurantDish_id"
];
const emptyCart = {
  dishes: [],
  totalPrice: 0
};

export const setCart = value => {
  localStorage.setItem("cart", JSON.stringify(value));
  cartStore.updateCart(JSON.parse(localStorage.getItem("cart")));
};

const createNewCart = () => {
  setCart(emptyCart);
  return emptyCart;
};

const getSize = d => R.find(size => d.size_id == size.id)(d.sizes);

const countPrice = d => getSize(d).price * d.count;

const getDish = (d_id, dishes) => R.find(R.propEq("id", d_id))(dishes);

export const addDishToCart = dish => {
  const cCart = cartStore.cart;
  const cart = cCart ? cCart : createNewCart();
  const propDish = R.pick(dishProps, dish);
  const dishSize = getSize(propDish);
  const newDishPrice = countPrice(propDish);
  const oldDish = getDish(dishSize.DishInMenuId, cart.dishes);
  const newDish = !oldDish
    ? {
        ...propDish,
        id: dishSize.DishInMenuId,
        price: dishSize.price,
        totalPrice: newDishPrice
      }
    : {
        ...oldDish,
        count: oldDish.count + propDish.count,
        totalPrice: oldDish.totalPrice + newDishPrice
      };
  const newDishes = oldDish
    ? R.map(R.ifElse(R.propEq("id", oldDish.id), () => newDish, item => item))(
        cart.dishes
      )
    : [...cart.dishes, newDish];
  setCart({ dishes: newDishes, totalPrice: cart.totalPrice + newDishPrice });
};

const dishUpDown = (id, dec) => {
  const oldCart = cartStore.cart;
  let totalPrice = oldCart.totalPrice;
  const addSub = !dec ? R.add : R.subtract;
  const newDishes = R.map(
    R.ifElse(
      R.propEq("id", id),
      dish => {
        if (dish.count === 1 && dec) return dish;
        totalPrice = addSub(totalPrice, dish.price);
        return {
          ...dish,
          count: addSub(dish.count, 1),
          totalPrice: addSub(dish.totalPrice, dish.price)
        };
      },
      item => item
    )
  )(oldCart.dishes);
  setCart({ dishes: newDishes, totalPrice });
};

export const dishUp = id => dishUpDown(id, false);
export const dishDown = id => dishUpDown(id, true);
export const dishDelete = id => {
  const oldCart = cartStore.cart;
  const dish = getDish(id, oldCart.dishes);
  setCart({
    dishes: R.reject(R.eqProps("id", dish), oldCart.dishes),
    totalPrice: oldCart.totalPrice - dish.totalPrice
  });
};
